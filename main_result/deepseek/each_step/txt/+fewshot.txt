SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) FROM frpm WHERE `County Name` = 'Alameda'
SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS eligible_free_rate FROM frpm WHERE `School Type` = 'Continuation' ORDER BY eligible_free_rate LIMIT 3
SELECT `Zip` FROM `schools` WHERE `CDSCode` IN (SELECT `CDSCode` FROM `frpm` WHERE `Charter School (Y/N)` = 1) AND `District` = 'Fresno County Office of Education'
SELECT `schools`.`MailStreet` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` ORDER BY `frpm`.`FRPM Count (K-12)` DESC LIMIT 1
SELECT `schools`.`Phone` FROM `schools` INNER JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `frpm`.`Charter School (Y/N)` = 1 AND `schools`.`OpenDate` > '2000-01-01' AND `frpm`.`Charter Funding Type` = 'Direct Funding'
SELECT COUNT(DISTINCT `schools`.`CDSCode`) FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `satscores`.`AvgScrMath` > 400 AND `schools`.`Virtual` = 'F'
SELECT `schools`.`School` FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `satscores`.`NumTstTakr` > 500 AND `schools`.`Magnet` = 1
SELECT T3.Phone FROM satscores AS T1 INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT satscores.NumTstTakr FROM satscores INNER JOIN frpm ON satscores.cds = frpm.CDSCode ORDER BY frpm.FRPM Count (K-12) DESC LIMIT 1
SELECT COUNT(DISTINCT `schools`.`CDSCode`) FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `satscores`.`AvgScrMath` > 560 AND `schools`.`FundingType` = 'Charter'}
SELECT `frpm`.`FRPM Count (Ages 5-17)` FROM `satscores` INNER JOIN `frpm` ON `satscores`.`cds` = `frpm`.`CDSCode` ORDER BY `satscores`.`AvgScrRead` DESC LIMIT 1
SELECT DISTINCT `CDSCode` FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500
SELECT MAX(`Percent (%) Eligible Free (Ages 5-17)`) FROM frpm INNER JOIN satscores ON frpm.`CDSCode` = satscores.cds WHERE (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) > 0.3
SELECT T3.Phone FROM satscores AS T1 INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode ORDER BY (T1.NumGE1500 * 1.0 / T1.NumTstTakr) DESC LIMIT 3
SELECT `schools`.`NCESSchool` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` ORDER BY `frpm`.`Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT T.dname FROM ( SELECT T2.dname, AVG(T1.AvgScrRead) AS avg_score FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' GROUP BY T2.dname ) T ORDER BY T.avg_score DESC LIMIT 1
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Alameda' AND T1.NumTstTakr < 100
SELECT `schools`.`CharterNum`, AVG(`satscores`.`AvgScrWrite`) AS avg_score FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` WHERE `satscores`.`AvgScrWrite` > 499 AND `schools`.`CharterNum` IS NOT NULL GROUP BY `schools`.`CharterNum` ORDER BY avg_score DESC
SELECT COUNT(DISTINCT `schools`.`CDSCode`) FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `schools`.`City` = 'Fresno' AND `schools`.`FundingType` = 'Directly Funded' AND `satscores`.`NumTstTakr` <= 250
SELECT `Phone` FROM `schools` WHERE `CDSCode` = (SELECT `cds` FROM `satscores` ORDER BY `AvgScrMath` DESC LIMIT 1)
SELECT COUNT(`CDSCode`) FROM `frpm` WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'
SELECT COUNT(*) FROM frpm WHERE `District Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700
SELECT T.sname FROM ( SELECT T2.sname, COUNT(T2.NumTstTakr) AS num FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Contra Costa' GROUP BY T2.sname ) T ORDER BY T.num DESC LIMIT 1
SELECT `schools`.`School`, `schools`.`Street`, `schools`.`City`, `schools`.`State`, `schools`.`Zip` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE (`frpm`.`Enrollment (K-12)` - `frpm`.`Enrollment (Ages 5-17)`) > 30
SELECT DISTINCT `schools`.`School` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE (`frpm`.`Free Meal Count (K-12)` / `frpm`.`Enrollment (K-12)`) > 0.1 AND `satscores`.`NumGE1500` > 0
SELECT `schools`.`FundingType` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` WHERE `schools`.`City` = 'Riverside' GROUP BY `schools`.`CDSCode` HAVING AVG(`satscores`.`AvgScrMath`) > 400
SELECT `schools`.`School`, `schools`.`Street`, `schools`.`City`, `schools`.`State`, `schools`.`Zip` FROM `schools` INNER JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `schools`.`City` = 'Monterey' AND `schools`.`GSserved` = 'High' AND `frpm`.`Free Meal Count (Ages 5-17)` > 800
SELECT s.School, ss.AvgScrWrite, s.Phone FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode WHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01'
SELECT `schools`.`School`, `schools`.`DOCType` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`FundingType` = 'Locally Funded' AND (`frpm`.`Enrollment (K-12)` - `frpm`.`Enrollment (Ages 5-17)`) > (SELECT AVG(`Enrollment (K-12)` - `Enrollment (Ages 5-17)`) FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`FundingType` = 'Locally Funded')
SELECT OpenDate FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 1)
SELECT `City`, SUM(`Enrollment (K-12)`) AS total_enrollment FROM `frpm` GROUP BY `City` ORDER BY total_enrollment ASC LIMIT 5
SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS eligible_free_rate FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 2 OFFSET 8
SELECT `FRPM Count (K-12)` / `Enrollment (K-12)` AS eligible_meal_rate FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`FundingType` = 66 ORDER BY `FRPM Count (K-12)` DESC LIMIT 5
SELECT `schools`.`Website`, `schools`.`School` FROM `schools` INNER JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `frpm`.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` AS free_rate FROM schools WHERE `AdmFName1` = 'Kacey' AND `AdmLName1` = 'Gibson'
SELECT `AdmEmail1` FROM `schools` INNER JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `frpm`.`Charter School (Y/N)` = 1 ORDER BY `frpm`.`Enrollment (K-12)` ASC LIMIT 1
SELECT t3.AdmFName1, t3.AdmLName1, t3.AdmFName2, t3.AdmLName2, t3.AdmFName3, t3.AdmLName3 FROM satscores AS t1 INNER JOIN schools AS t3 ON t1.cds = t3.CDSCode ORDER BY t1.NumGE1500 DESC LIMIT 1
SELECT `schools`.`Street`, `schools`.`City`, `schools`.`State`, `schools`.`Zip` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` ORDER BY (`satscores`.`NumGE1500` / `satscores`.`NumTstTakr`) ASC LIMIT 1
SELECT `schools`.`Website` FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `schools`.`County` = 'Los Angeles' AND `satscores`.`NumTstTakr` BETWEEN 2000 AND 3000
SELECT AVG(`satscores`.`NumTstTakr`) FROM `schools` INNER JOIN `satscores` ON `schools`.`CDSCode` = `satscores`.`cds` WHERE `schools`.`OpenDate` BETWEEN '1980-01-01' AND '1980-12-31' AND `schools`.`City` = 'Fresno'
SELECT `schools`.`Phone` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` WHERE `schools`.`District` = 'Fresno Unified' ORDER BY `satscores`.`AvgScrRead` ASC LIMIT 1
SELECT T1.School FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.Virtual = 'F' AND T2.AvgScrRead IN (SELECT DISTINCT AVG(T3.AvgScrRead) OVER (PARTITION BY T3.cname ORDER BY T3.AvgScrRead DESC ROWS BETWEEN UNBOUNDED PRECEDING AND 4 FOLLOWING) AS avg_read_score FROM satscores AS T3 INNER JOIN schools AS T4 ON T3.cds = T4.CDSCode WHERE T4.Virtual = 'F')
SELECT T1.EILName FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1
SELECT AVG(`satscores`.`AvgScrMath`), `schools`.`County` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` GROUP BY `satscores`.`cds` ORDER BY (`satscores`.`AvgScrMath` + `satscores`.`AvgScrRead` + `satscores`.`AvgScrWrite`) ASC LIMIT 1
SELECT AVG(`AvgScrWrite`), `City` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` ORDER BY `NumGE1500` DESC LIMIT 1
SELECT T2.sname, AVG(T1.AvgScrWrite) AS avg_writing_score FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmLName1 = 'Ulrich' AND T2.AdmFName1 = 'Ricci' GROUP BY T2.sname
SELECT `schools`.`School`, MAX(`frpm`.`Enrollment (K-12)`) AS max_enrollment FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`DOC` = 31 GROUP BY `schools`.`School` ORDER BY max_enrollment DESC LIMIT 1
SELECT COUNT(`CDSCode`) / 12 FROM `schools` WHERE `County` = 'Alameda' AND `DOC` = 52 AND strftime('%Y', `OpenDate`) = '1980'
SELECT COUNT(CASE WHEN `DOC` = 54 THEN 1 END) * 1.0 / COUNT(CASE WHEN `DOC` = 52 THEN 1 END) FROM schools WHERE `County` = 'Orange' AND `StatusType` = 'Merged'
SELECT `schools`.`County`, `schools`.`School`, `schools`.`ClosedDate` FROM `schools` WHERE `schools`.`StatusType` = 'Closed' GROUP BY `schools`.`County` ORDER BY COUNT(*) DESC LIMIT 1
SELECT `schools`.`Street`, `schools`.`School` FROM `satscores` INNER JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` ORDER BY `satscores`.`AvgScrMath` DESC LIMIT 1 OFFSET 6
SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead ASC LIMIT 1
SELECT COUNT(*) FROM schools AS s INNER JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE s.MailCity = 'Lakeport' AND (ss.AvgScrRead + ss.AvgScrMath + ss.AvgScrWrite) >= 1500
SELECT COUNT(DISTINCT `satscores`.`cds`) FROM `satscores` JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` WHERE `schools`.`MailCity` = 'Fresno'
SELECT `schools`.`School`, `schools`.`MailZip` FROM `schools` WHERE (`schools`.`AdmFName1` = 'Avetik' AND `schools`.`AdmLName1` = 'Atoian') OR (`schools`.`AdmFName2` = 'Avetik' AND `schools`.`AdmLName2` = 'Atoian') OR (`schools`.`AdmFName3` = 'Avetik' AND `schools`.`AdmLName3` = 'Atoian')
SELECT CAST((SELECT COUNT(`schools`.`CDSCode`) FROM `schools` WHERE `schools`.`County` = 'Colusa' AND `schools`.`State` = 'CA') AS REAL) / (SELECT COUNT(`schools`.`CDSCode`) FROM `schools` WHERE `schools`.`County` = 'Humboldt' AND `schools`.`State` = 'CA') AS ratio
SELECT COUNT(*) FROM schools WHERE `State` = 'California' AND `City` = 'San Joaquin' AND `StatusType` = 'Active'
SELECT `Phone`, `Ext` FROM `schools` WHERE `CDSCode` = (SELECT `cds` FROM `satscores` ORDER BY `AvgScrWrite` DESC LIMIT 1 OFFSET 332)
SELECT `School`, `Phone`, `Ext` FROM `schools` WHERE `Zip` = '95203-3704'
SELECT `schools`.`Website` FROM `schools` WHERE (`schools`.`AdmFName1` = 'Mike' AND `schools`.`AdmLName1` = 'Larson') OR (`schools`.`AdmFName2` = 'Mike' AND `schools`.`AdmLName2` = 'Larson') OR (`schools`.`AdmFName3` = 'Mike' AND `schools`.`AdmLName3` = 'Larson') OR (`schools`.`AdmFName1` = 'Dante' AND `schools`.`AdmLName1` = 'Alvarez') OR (`schools`.`AdmFName2` = 'Dante' AND `schools`.`AdmLName2` = 'Alvarez') OR (`schools`.`AdmFName3` = 'Dante' AND `schools`.`AdmLName3` = 'Alvarez')
SELECT `Website` FROM `schools` WHERE `Virtual` = 'P' AND `Charter` = 1 AND `City` = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = 52
SELECT COUNT(*) FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`Charter` = 0 AND `frpm`.`County Name` = 'Los Angeles' AND (`frpm`.`Free Meal Count (K-12)` * 100.0 / `frpm`.`Enrollment (K-12)`) < 0.18
SELECT `schools`.`School`, `schools`.`City`, `schools`.`AdmFName1`, `schools`.`AdmLName1`, `schools`.`AdmFName2`, `schools`.`AdmLName2`, `schools`.`AdmFName3`, `schools`.`AdmLName3` FROM `schools` WHERE `schools`.`Charter` = 1 AND `schools`.`CharterNum` = '00D2'
SELECT COUNT(*) FROM schools WHERE `MailCity` = 'Hickman' AND `CharterNum` = '00D4'
SELECT CAST(SUM(CASE WHEN `frpm`.`Charter Funding Type` = 'Locally Funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`County` = 'Santa Clara'
SELECT COUNT(DISTINCT `CDSCode`) FROM `schools` WHERE `FundingType` = 'Directly Funded' AND `County` = 'Stanislaus' AND `OpenDate` BETWEEN '2000-01-01' AND '2005-12-31'
SELECT COUNT(*) FROM schools WHERE `ClosedDate` = '1989' AND `City` = 'San Francisco' AND `SchoolType` = 'Community College District'
SELECT `County`, COUNT(*) AS `ClosureCount` FROM `schools` WHERE `SOCType` = 11 AND `ClosedDate` BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY `County` ORDER BY `ClosureCount` DESC LIMIT 1
SELECT `schools`.`NCESDist` FROM `schools` WHERE `schools`.`SOC` = 31
SELECT COUNT(*) FROM schools WHERE County = 'Alpine' AND StatusType IN ('Active', 'Closed') AND SchoolType = 'District Community Day School'
SELECT `District` FROM `schools` WHERE `City` = 'Fresno' AND `Magnet` = 0 LIMIT 1
SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`EdOpsCode` = 'SSS' AND schools.`City` = 'Fremont' AND frpm.`Academic Year` = '2014-2015'
SELECT `Free Meal Count (Ages 5-17)` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`School` = 'Youth Authority School' AND `schools`.`MailStreet` = 'PO Box 1040'
SELECT MIN(`Low Grade`) FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`NCESDist` = '0613360' AND `schools`.`EdOpsCode` = 'SPECON'
SELECT `School Name` FROM frpm WHERE `County Code` = '37' AND `NSLP Provision Status` = 'Breakfast Provision 2'
SELECT `City` FROM `schools` WHERE `EILCode` = 'HS' AND `CDSCode` IN (SELECT `CDSCode` FROM `frpm` WHERE `NSLP Provision Status` = '2' AND `Low Grade` = '9' AND `High Grade` = '12' AND `County Name` = 'Merced')
SELECT `School Name`, (`FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100) AS `Percent (%) Eligible FRPM (Ages 5-17)` FROM frpm WHERE `County Name` = 'Los Angeles' AND `Low Grade` = 'K' AND `High Grade` = '9'
SELECT `GSserved` FROM `schools` WHERE `City` = 'Adelanto' GROUP BY `GSserved` ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(`schools`.`CDSCode`) AS `school_count`, `schools`.`County` FROM `schools` WHERE `schools`.`Virtual` = 'F' AND `schools`.`County` IN ('San Diego', 'Santa Barbara') GROUP BY `schools`.`County` ORDER BY `school_count` DESC LIMIT 1
SELECT `School Type`, `School`, `Latitude`, `Longitude` FROM `schools` ORDER BY `Latitude` DESC LIMIT 1
SELECT T1.School, T1.LowGrade FROM schools AS T1 WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1
SELECT `GSoffered` FROM `schools` ORDER BY ABS(`Longitude`) DESC LIMIT 1
SELECT COUNT(DISTINCT `frpm`.`CDSCode`) AS `schools_count`, `frpm`.`City` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`Magnet` = 1 AND `schools`.`Low Grade` = 'K' AND `schools`.`High Grade` = '8' AND `frpm`.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY `frpm`.`City`
SELECT AdmFName1, COUNT(*) AS name_count, District FROM schools GROUP BY AdmFName1 ORDER BY name_count DESC LIMIT 2
SELECT `frpm`.`District Code`, (`frpm`.`Free Meal Count (K-12)` / `frpm`.`Enrollment (K-12)` * 100) AS `Percent (%) Eligible Free (K-12)` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`AdmFName1` = 'Alusine'
SELECT `schools`.`AdmLName1`, `schools`.`District`, `schools`.`County`, `schools`.`School` FROM `schools` WHERE `schools`.`CharterNum` = 40
SELECT AdmEmail1, AdmEmail2, AdmEmail3 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)
SELECT T3.AdmEmail1, T2.sname FROM satscores AS T2 INNER JOIN schools AS T3 ON T2.cds = T3.CDSCode ORDER BY T2.NumGE1500 DESC LIMIT 1
SELECT COUNT(`account`.`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `account`.`frequency` = 'POPLATEK PO OBRATU' AND `district`.`A3` = 'East Bohemia'
SELECT COUNT(`account_id`) FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'
SELECT CASE WHEN AVG(`district`.`A12`) > AVG(`district`.`A13`) THEN '1995' ELSE '1996' END AS higher_percentage FROM `district`
SELECT COUNT(DISTINCT district_id) FROM district WHERE A11 > 6000 AND A11 < 10000
SELECT COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`gender` = 'M' AND `district`.`A3` = 'North Bohemia' AND `district`.`A11` > 8000
SELECT T1.account_id, (MAX(T4.A11) - MIN(T4.A11)) AS gap FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' GROUP BY T1.account_id ORDER BY T3.birth_date ASC, T4.A11 ASC LIMIT 1
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T3.birth_date = (SELECT MAX(birth_date) FROM client) AND T4.A11 = (SELECT MAX(A11) FROM district)
SELECT COUNT(*) FROM disp WHERE type = 'OWNER' AND disp_id IN (SELECT disp_id FROM card WHERE type = 'weekly issuance')
SELECT T1.`client_id` FROM `disp` AS T1 INNER JOIN `trans` AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`type` = 'POPLATEK PO OBRATU' AND T1.`type` = 'Disponent'
SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date LIKE '1997-%' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount ASC LIMIT 1
SELECT `account_id` FROM `loan` WHERE `duration` > 12 AND `account_id` IN (SELECT `account_id` FROM `account` WHERE STRFTIME('%Y', `date`) = '1993') ORDER BY `amount` DESC LIMIT 1
SELECT COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`gender` = 'F' AND `client`.`birth_date` < '1950-01-01' AND `district`.`A2` = 'Sokolov'
SELECT `account_id` FROM `trans` WHERE strftime('%Y', `date`) = '1995' ORDER BY `date` ASC LIMIT 1
SELECT `account_id` FROM `account` WHERE `date` < '1997-01-01' AND `amount` > 3000
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'
SELECT `account`.`date` FROM `trans` INNER JOIN `account` ON `trans`.`account_id` = `account`.`account_id` WHERE `trans`.`amount` = 840 AND `trans`.`date` = '1998-10-14'
SELECT `account`.`district_id` FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` WHERE `loan`.`date` = '1994-08-25'
SELECT MAX(T3.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.issued = '1996-10-21'
SELECT `client`.`gender` FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` ORDER BY `client`.`birth_date`, `district`.`A11` DESC LIMIT 1
SELECT MIN(t.`amount`) FROM `trans` t INNER JOIN `account` a ON t.`account_id` = a.`account_id` INNER JOIN `loan` l ON a.`account_id` = l.`account_id` WHERE t.`date` > a.`date` AND l.`amount` = (SELECT MAX(`amount`) FROM `loan`) GROUP BY t.`account_id`
SELECT COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Jesenik' AND `client`.`gender` = 'F'
SELECT T2.disp_id FROM `trans` AS T1 INNER JOIN `disp` AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'
SELECT COUNT(`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Litomerice' AND STRFTIME('%Y', `account`.`date`) = '1996'
SELECT D.`A2` FROM `client` AS C INNER JOIN `disp` AS DP ON C.`client_id` = DP.`client_id` INNER JOIN `district` AS D ON C.`district_id` = D.`district_id` WHERE C.`gender` = 'F' AND C.`birth_date` = '1976-01-29'
SELECT `client`.`birth_date` FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` INNER JOIN `loan` ON `account`.`account_id` = `loan`.`account_id` WHERE `loan`.`amount` = 98832 AND `loan`.`date` = '1996-01-03'
SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date LIMIT 1
SELECT CAST(SUM(CASE WHEN `client`.`gender` = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `district`.`A3` = 'south Bohemia' ORDER BY `district`.`A4` DESC LIMIT 1
SELECT ((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY loan_id LIMIT 1) AND date = '1998-12-27') - (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY loan_id LIMIT 1) AND date = '1993-03-22')) * 100.0 / (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY loan_id LIMIT 1) AND date = '1993-03-22') AS increase_rate
SELECT SUM(CASE WHEN `status` = 'A' THEN `amount` ELSE 0 END) * 100.0 / SUM(`amount`) FROM `loan`
SELECT CAST(SUM(IIF(`status` = 'C', 1, 0)) AS REAL) * 100 / COUNT(`account_id`) FROM `loan` WHERE `amount` < 100000
SELECT `account`.`account_id`, `district`.`A2` AS district_name, `district`.`A3` AS district_region FROM `account` INNER JOIN `trans` ON `account`.`account_id` = `trans`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `trans`.`k_symbol` = 'POPLATEK PO OBRATU' AND strftime('%Y', `account`.`date`) = '1993'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.date >= '1995-01-01' AND T1.date <= '2000-12-31'
SELECT `account_id`, `date` FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Prachatice'
SELECT D.A2, D.A3 FROM district AS D INNER JOIN account AS A ON D.district_id = A.district_id INNER JOIN loan AS L ON A.account_id = L.account_id WHERE L.loan_id = '4990'
SELECT `account`.`account_id`, `district`.`A2` AS district, `district`.`A3` AS region FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`amount` > 300000
SELECT `loan`.`loan_id`, `district`.`A3`, `district`.`A11` FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`duration` = 60
SELECT `district`.`A2`, ((`district`.`A13` - `district`.`A12`) / `district`.`A12`) * 100 AS unemployment_increment_rate FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`status` = 'D'
SELECT CAST(COUNT(CASE WHEN A2 = 'Decin' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE strftime('%Y', account.date) = '1993'
SELECT `account_id` FROM `account` WHERE `frequency` = 'POPLATEK MESICNE'
SELECT `district`.`A2` AS district, COUNT(*) AS female_account_holders FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`gender` = 'F' GROUP BY `district`.`A2` ORDER BY female_account_holders DESC LIMIT 9
SELECT d.`A2`, SUM(t.`amount`) AS total_withdrawals FROM `trans` AS t INNER JOIN `account` AS a ON t.`account_id` = a.`account_id` INNER JOIN `district` AS d ON a.`district_id` = d.`district_id` WHERE t.`type` = 'VYDAJ' AND t.`date` LIKE '1996-01%' GROUP BY d.`A2` ORDER BY total_withdrawals DESC LIMIT 10
SELECT COUNT(DISTINCT `disp`.`client_id`) FROM `disp` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` LEFT JOIN `card` ON `disp`.`disp_id` = `card`.`disp_id` WHERE `district`.`A3` = 'South Bohemia' AND `card`.`card_id` IS NULL
SELECT `district`.`A3` FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`status` = 'C' GROUP BY `district`.`A3` ORDER BY COUNT(`district`.`A3`) DESC LIMIT 1
SELECT AVG(`loan`.`amount`) FROM `loan` INNER JOIN `disp` ON `loan`.`account_id` = `disp`.`account_id` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` WHERE `client`.`gender` = 'M'
SELECT `A2` AS district_name, `A13` AS unemployment_rate FROM `district` ORDER BY `A13` DESC
SELECT COUNT(`account`.`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`district_id` = (SELECT `district_id` FROM `district` ORDER BY `A16` DESC LIMIT 1)
SELECT COUNT(DISTINCT `trans`.`account_id`) FROM `trans` INNER JOIN `account` ON `trans`.`account_id` = `account`.`account_id` WHERE `trans`.`operation` = 'VYBER KARTOU' AND `trans`.`balance` < 0 AND `account`.`frequency` = 'POPLATEK MESICNE'
SELECT COUNT(*) FROM loan AS l INNER JOIN account AS a ON l.account_id = a.account_id WHERE l.amount >= 250000 AND a.frequency = 'POPLATEK MESICNE' AND l.date BETWEEN '1995-01-01' AND '1997-12-31'
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Branch location 1' AND T3.status IN ('C', 'D')
SELECT COUNT(`client`.`client_id`) FROM `district` INNER JOIN `client` ON `district`.`district_id` = `client`.`district_id` WHERE `client`.`gender` = 'M' AND `district`.`district_id` = (SELECT `district_id` FROM `district` ORDER BY `A15` DESC LIMIT 1 OFFSET 1)
SELECT COUNT(*) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'
SELECT COUNT(`account_id`) FROM `account` WHERE `district_id` = (SELECT `district_id` FROM `district` WHERE `A2` = 'Pisek' LIMIT 1)
SELECT `district`.`district_id`, `district`.`A2` FROM `trans` INNER JOIN `account` ON `trans`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `trans`.`date` BETWEEN '1997-01-01' AND '1997-12-31' AND `trans`.`amount` > 10000 GROUP BY `district`.`district_id`
SELECT DISTINCT `account`.`account_id` FROM `account` INNER JOIN `order` ON `account`.`account_id` = `order`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `order`.`k_symbol` = 'SIPO' AND `district`.`A3` = 'Pisek'
SELECT `account_id` FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `disp` WHERE `disp_id` IN (SELECT `disp_id` FROM `card` WHERE `type` = 'gold'))
SELECT AVG(amount) FROM `trans` WHERE `type` = 'VYBER KARTOU' AND STRFTIME('%Y', `date`) = '2021'
SELECT DISTINCT `disp`.`account_id` FROM `trans` INNER JOIN `disp` ON `trans`.`account_id` = `disp`.`account_id` WHERE `trans`.`operation` = 'VYBER KARTOU' AND STRFTIME('%Y', `trans`.`date`) = '1998' AND `trans`.`amount` < (SELECT AVG(`amount`) FROM `trans` WHERE `operation` = 'VYBER KARTOU' AND STRFTIME('%Y', `date`) = '1998')
SELECT DISTINCT c.`client_id` FROM `client` AS c INNER JOIN `disp` AS d ON c.`client_id` = d.`client_id` INNER JOIN `card` AS cr ON d.`disp_id` = cr.`disp_id` INNER JOIN `loan` AS l ON d.`account_id` = l.`account_id` WHERE c.`gender` = 'F' AND cr.`type` = 'credit' AND l.`status` IS NOT NULL
SELECT COUNT(DISTINCT `client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`gender` = 'F' AND `district`.`A3` = 'south Bohemia'
SELECT `account_id` FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Tabor' AND `account`.`type` = 'OWNER'
SELECT `disp`.`type` FROM `disp` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `disp`.`type` != 'OWNER' AND `district`.`A11` > 8000 AND `district`.`A11` <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T2.bank = 'AB'
SELECT DISTINCT `district`.`A2` FROM `trans` INNER JOIN `account` ON `trans`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `trans`.`type` = 'VYDAJ'
SELECT AVG(`district`.`A15`) FROM `district` INNER JOIN `account` ON `district`.`district_id` = `account`.`district_id` WHERE `district`.`A15` > 4000 AND strftime('%Y', `account`.`date`) >= '1997'
SELECT COUNT(`card`.`card_id`) FROM `card` JOIN `disp` ON `card`.`disp_id` = `disp`.`disp_id` JOIN `account` ON `disp`.`account_id` = `account`.`account_id` WHERE `card`.`type` = 'classic' AND `disp`.`type` = 'OWNER'
SELECT COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Hl.m. Praha' AND `client`.`gender` = 'M'
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM card)) AS PercentOfGold FROM card WHERE `type` = 'gold' AND STRFTIME('%Y', `issued`) < '1998'
SELECT c.`client_id` FROM `client` c INNER JOIN `disp` d ON c.`client_id` = d.`client_id` INNER JOIN `account` a ON d.`account_id` = a.`account_id` INNER JOIN `loan` l ON a.`account_id` = l.`account_id` ORDER BY l.`amount` DESC LIMIT 1
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT T1.`district_id` FROM `account` AS T1 INNER JOIN `order` AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`order_id` = 33333
SELECT t.`trans_id`, t.`amount`, t.`date` FROM `trans` AS t INNER JOIN `disp` AS d ON t.`account_id` = d.`account_id` WHERE d.`client_id` = 3356 AND t.`operation` = 'VYBER'
SELECT COUNT(`loan`.`loan_id`) FROM `account` INNER JOIN `loan` ON `account`.`account_id` = `loan`.`account_id` WHERE `account`.`frequency` = 'POPLATEK TYDNE' AND `loan`.`amount` < 200000
SELECT `type` FROM `card` WHERE `disp_id` = (SELECT `disp_id` FROM `disp` WHERE `client_id` = 13539)
SELECT `district`.`A3` FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`client_id` = 3541
SELECT `district`.`A2` FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`status` = 'A' GROUP BY `district`.`A2` ORDER BY COUNT(`account`.`account_id`) DESC LIMIT 1
SELECT T1.client_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.card_id = 32423
SELECT * FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `account` WHERE `district_id` = 5)
SELECT COUNT(*) FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'
SELECT CAST(SUM(CASE WHEN `client`.`gender` = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`client`.`client_id`) FROM `client` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` WHERE `district`.`A11` > 10000 AND `disp`.`type` = 'OWNER'
SELECT (SUM(CASE WHEN STRFTIME('%Y', `loan`.`date`) = '1997' THEN `loan`.`amount` ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', `loan`.`date`) = '1996' THEN `loan`.`amount` ELSE 0 END)) * 100.0 / SUM(CASE WHEN STRFTIME('%Y', `loan`.`date`) = '1996' THEN `loan`.`amount` ELSE 0 END) AS growth_rate FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `disp` ON `account`.`account_id` = `disp`.`account_id` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` WHERE `client`.`gender` = 'M' AND STRFTIME('%Y', `loan`.`date`) IN ('1996', '1997')
SELECT COUNT(*) FROM `trans` WHERE `operation` = 'VYBER KARTOU' AND `date` > '1995-12-31'
SELECT (SELECT A16 FROM district WHERE A3 = 'North Bohemia') - (SELECT A16 FROM district WHERE A3 = 'East Bohemia') AS crime_difference
SELECT COUNT(*) FROM disp WHERE `account_id` BETWEEN 1 AND 10 AND `type` IN ('OWNER', 'DISPONENT')
SELECT frequency, SUM(amount) FROM account AS a INNER JOIN trans AS t ON a.account_id = t.account_id WHERE a.account_id = 3 AND t.k_symbol = '3539' GROUP BY frequency
SELECT `client`.`birth_date` FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` WHERE `account`.`account_id` = 130
SELECT COUNT(*) FROM `account` AS T1 INNER JOIN `disp` AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT l.amount, l.status FROM loan l JOIN account a ON l.account_id = a.account_id JOIN disp d ON a.account_id = d.account_id WHERE d.client_id = '992'
SELECT SUM(`trans`.`amount`) AS total_amount, `client`.`gender` FROM `trans` INNER JOIN `account` ON `trans`.`account_id` = `account`.`account_id` INNER JOIN `disp` ON `account`.`account_id` = `disp`.`account_id` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` WHERE `disp`.`client_id` = 4 AND `trans`.`trans_id` > 851 GROUP BY `client`.`gender`
SELECT DISTINCT `card`.`type` FROM `card` INNER JOIN `disp` ON `card`.`disp_id` = `disp`.`disp_id` WHERE `disp`.`client_id` = 9
SELECT SUM(`amount`) FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `disp` WHERE `client_id` = 617) AND `date` LIKE '1998-%'
SELECT `client`.`client_id`, `client`.`birth_date` FROM `client` JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`birth_date` BETWEEN '1983-01-01' AND '1987-12-31' AND `district`.`A3` = 'East Bohemia'
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3
SELECT COUNT(DISTINCT `disp`.`client_id`) FROM `disp` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` INNER JOIN `trans` ON `disp`.`account_id` = `trans`.`account_id` WHERE `client`.`gender` = 'M' AND `client`.`birth_date` BETWEEN '1974-01-01' AND '1976-12-31' AND `trans`.`k_symbol` = 'SIPO' AND `trans`.`amount` > 4000
SELECT COUNT(`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Beroun' AND STRFTIME('%Y', `account`.`date`) > '1996'
SELECT COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'
SELECT CAST(COUNT(CASE WHEN `client`.`gender` = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*) FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A3` = 'Prague'
SELECT CAST(SUM(CASE WHEN `client`.`gender` = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`client`.`gender`) FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` WHERE `account`.`frequency` = 'POPLATEK TYDNE'
SELECT COUNT(*) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'
SELECT `account_id` FROM `loan` WHERE `duration` > 24 AND `account_id` IN (SELECT `account_id` FROM `account` WHERE `date` < '1997-01-01') ORDER BY `amount` ASC LIMIT 1
SELECT `account_id` FROM `disp` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `client`.`gender` = 'F' ORDER BY `client`.`birth_date`, `district`.`A11` LIMIT 1
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date LIKE '1920-%' AND T2.A3 = 'east Bohemia';
SELECT COUNT(`loan`.`account_id`) FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` WHERE `loan`.`duration` = 24 AND `account`.`frequency` = 'POPLATEK TYDNE'
SELECT AVG(amount) FROM `loan` WHERE `status` = 'C' AND `loan_id` IN (SELECT `loan_id` FROM `trans` WHERE `k_symbol` = 'POPLATEK PO OBRATU')
SELECT `client`.`client_id`, `client`.`district_id` FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` WHERE `disp`.`type` = 'OWNER'
SELECT T1.client_id, (strftime('%Y', 'now') - strftime('%Y', T1.birth_date)) - (strftime('%m-%d', 'now') < strftime('%m-%d', T1.birth_date)) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T2.type = 'OWNER'
SELECT T.bond_type FROM ( SELECT T2.bond_type, COUNT(T2.bond_type) AS num FROM bond AS T2 GROUP BY T2.bond_type ) AS T ORDER BY T.num DESC LIMIT 1
SELECT COUNT(DISTINCT `atom`.`molecule_id`) FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '-' AND `atom`.`element` = 'cl'
SELECT CAST(SUM(CASE WHEN `element` = 'o' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT `molecule_id`) FROM `atom` JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `bond_type` = '-'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'na' AND `molecule`.`label` = '-'
SELECT DISTINCT `molecule`.`molecule_id` FROM `molecule` INNER JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '#' AND `molecule`.`label` = '+'
SELECT SUM(CASE WHEN `atom`.`element` = 'c' THEN 1 ELSE 0 END) * 1.0 / COUNT(`atom`.`atom_id`) AS percentage FROM `atom` INNER JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '='
SELECT COUNT(`bond_id`) FROM `bond` WHERE `bond_type` = '#'
SELECT COUNT(`atom_id`) FROM `atom` WHERE `element` != 'br'
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT DISTINCT `molecule_id` FROM `atom` WHERE `element` = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'
SELECT DISTINCT `atom`.`element` FROM `atom` INNER JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `bond`.`bond_type` = '='
SELECT `molecule`.`label` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`element` = 'h' GROUP BY `molecule`.`label` ORDER BY COUNT(`molecule`.`label`) DESC LIMIT 1
SELECT DISTINCT `bond`.`bond_type` FROM `bond` INNER JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` INNER JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 'cl'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'
SELECT T1.atom_id, T3.atom_id2 FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1
SELECT `bond`.`bond_type` FROM `connected` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE (`connected`.`atom_id` = 'TR004_8' AND `connected`.`atom_id2` = 'TR004_20') OR (`connected`.`atom_id` = 'TR004_20' AND `connected`.`atom_id2` = 'TR004_8')
SELECT DISTINCT `molecule`.`label` FROM `molecule` WHERE `molecule`.`label` NOT IN (SELECT `molecule`.`label` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'sn')
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-'
SELECT DISTINCT T1.atom_id, T2.atom_id2 FROM bond AS T3 INNER JOIN connected AS T2 ON T3.bond_id = T2.bond_id INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id WHERE T3.bond_type = '#'
SELECT DISTINCT T3.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.molecule_id = 'TR181'
SELECT CAST(COUNT(DISTINCT CASE WHEN `atom`.`element` != 'f' THEN `atom`.`molecule_id` END) AS REAL) * 100 / COUNT(DISTINCT `atom`.`molecule_id`) FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+'
SELECT CAST(SUM(CASE WHEN `bond`.`bond_type` = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`bond`.`bond_id`) AS percent FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+' AND `bond`.`bond_type` = '#'
SELECT `element` FROM `atom` WHERE `molecule_id` = 'TR000' ORDER BY `element` ASC LIMIT 3
SELECT T1.element AS Atom1, T2.element AS Atom2 FROM connected AS T3 INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id INNER JOIN atom AS T2 ON T3.atom_id2 = T2.atom_id WHERE T3.bond_id = 'TR001_2_6' AND T1.molecule_id = 'TR001' AND T2.molecule_id = 'TR001'
SELECT SUM(CASE WHEN `label` = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN `label` = '-' THEN 1 ELSE 0 END) AS difference FROM `molecule`
SELECT `atom_id`, `atom_id2` FROM `connected` WHERE `bond_id` = 'TR000_2_5'
SELECT `bond_id` FROM `connected` WHERE `atom_id2` = 'TR000_2'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.label ORDER BY T1.label ASC LIMIT 5
SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN `molecule`.`label` = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(`molecule`.`molecule_id`) * 100 AS percent FROM `molecule`
SELECT CAST(SUM(CASE WHEN `element` = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `atom` WHERE `molecule_id` = 'TR206'
SELECT DISTINCT `bond`.`bond_type` FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`molecule_id` = 'TR000'
SELECT `atom`.`element`, `molecule`.`label` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`molecule_id` = 'TR060'
SELECT T1.bond_type, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.bond_type) DESC LIMIT 1
SELECT `molecule`.`molecule_id` FROM `molecule` INNER JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` WHERE `molecule`.`label` = '-' AND `bond`.`bond_type` = '-' GROUP BY `molecule`.`molecule_id` ORDER BY `molecule`.`molecule_id` ASC LIMIT 3
SELECT `bond_id` FROM `bond` WHERE `molecule_id` = 'TR006' ORDER BY `bond_id` ASC LIMIT 2
SELECT COUNT(DISTINCT `connected`.`bond_id`) FROM `connected` WHERE (`connected`.`atom_id` = 'TR009_12' OR `connected`.`atom_id2` = 'TR009_12') AND `connected`.`bond_id` IN (SELECT `bond`.`bond_id` FROM `bond` WHERE `bond`.`molecule_id` = 'TR009')
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `molecule`.`label` = '+' AND `atom`.`element` = 'br'
SELECT T1.bond_type, T2.atom_id AS atom1, T3.atom_id2 AS atom2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id WHERE T1.bond_id = 'TR001_6_9' AND T2.atom_id <> T3.atom_id2
SELECT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT `bond`.`molecule_id`) FROM `bond` WHERE `bond`.`bond_type` = '#'
SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = 'TR004'
SELECT COUNT(DISTINCT `molecule_id`) FROM `molecule` WHERE `label` = '-'
SELECT DISTINCT `molecule`.`molecule_id` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `molecule`.`label` = '+' AND SUBSTR(`atom`.`atom_id`, 7, 2) BETWEEN '21' AND '25'
SELECT DISTINCT T3.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'p' AND EXISTS (SELECT 1 FROM connected AS T4 INNER JOIN atom AS T5 ON T4.atom_id2 = T5.atom_id WHERE T4.bond_id = T3.bond_id AND T5.element = 'n')
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1
SELECT CAST(COUNT(`bond_id`) AS REAL) / COUNT(DISTINCT `atom_id`) FROM `connected` WHERE `atom_id` IN (SELECT `atom_id` FROM `atom` WHERE `element` = 'i')
SELECT `bond`.`bond_type`, `bond`.`bond_id` FROM `bond` INNER JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` WHERE `connected`.`atom_id` = 45
SELECT DISTINCT `element` FROM `atom` WHERE `atom_id` NOT IN (SELECT `atom_id` FROM `connected`)
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.molecule_id = 'TR041' AND T3.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'
SELECT T1.molecule_id, COUNT(T2.bond_id) AS double_bond_count FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = ' = ' GROUP BY T1.molecule_id ORDER BY double_bond_count DESC LIMIT 1
SELECT `element` FROM `atom` WHERE `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = '+') GROUP BY `element` ORDER BY COUNT(`atom_id`) ASC LIMIT 1
SELECT DISTINCT T3.atom_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.element = 'pb'
SELECT DISTINCT `atom`.`element` FROM `atom` INNER JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `bond`.`bond_type` = '#'
SELECT CAST(COUNT(DISTINCT c.`bond_id`) AS REAL) * 100 / (SELECT COUNT(DISTINCT b.`bond_id`) FROM `bond` b) AS percentage FROM `connected` c JOIN `atom` a1 ON c.`atom_id` = a1.`atom_id` JOIN `atom` a2 ON c.`atom_id2` = a2.`atom_id` GROUP BY a1.`element`, a2.`element` ORDER BY COUNT(DISTINCT c.`bond_id`) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS proportion FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM `atom` WHERE `element` IN ('c', 'h')
SELECT `connected`.`atom_id2` FROM `connected` INNER JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `atom`.`element` = 's'
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT COUNT(DISTINCT `atom`.`atom_id`) FROM `atom` INNER JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '#' AND (`atom`.`element` = 'p' OR `atom`.`element` = 'br')
SELECT DISTINCT `connected`.`bond_id` FROM `connected` INNER JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+'
SELECT DISTINCT `molecule`.`molecule_id` FROM `molecule` INNER JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '-' AND `molecule`.`label` = '-'
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS percentage FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT `label` FROM `molecule` WHERE `molecule_id` IN ('TR000', 'TR001', 'TR002')
SELECT `molecule_id` FROM `molecule` WHERE `label` = '-'
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` WHERE `molecule`.`label` = '+' AND `molecule`.`molecule_id` BETWEEN 'TR000' AND 'TR030'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT connected.bond_id) FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 'i'
SELECT CASE WHEN MAX(label) = '+' THEN 'carcinogenic' ELSE 'non-carcinogenic' END AS carcinogenicity FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'ca')
SELECT CASE WHEN EXISTS (SELECT 1 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_1_8' AND T2.element = 'cl') AND EXISTS (SELECT 1 FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id2 = T4.atom_id WHERE T3.bond_id = 'TR001_1_8' AND T4.element = 'c') THEN 'Yes' ELSE 'No' END AS has_both_elements
SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'c' AND T3.bond_type = '#' AND T4.label = '-' LIMIT 2
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT `atom`.`element` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`molecule_id` = 'TR001'
SELECT DISTINCT `bond`.`molecule_id` FROM `bond` WHERE `bond`.`bond_type` = ' = '
SELECT T1.atom_id AS first_atom_id, T2.atom_id2 AS second_atom_id FROM bond AS T3 INNER JOIN connected AS T1 ON T3.bond_id = T1.bond_id INNER JOIN connected AS T2 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = '#'
SELECT `atom`.`element` FROM `connected` INNER JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `connected`.`bond_id` = 'TR000_1_2'
SELECT COUNT(DISTINCT `bond`.`molecule_id`) FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond`.`bond_type` = '-' AND `molecule`.`label` = '-'
SELECT `molecule`.`label` FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond`.`bond_id` = 'TR001_10_11'
SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT COUNT(DISTINCT `atom`.`atom_id`) FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+' AND SUBSTR(`atom`.`atom_id`, 7, 1) = '4'
SELECT CAST(SUM(CASE WHEN `element` = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(`element`) AS ratio, `label` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`molecule_id` = 'TR006' GROUP BY `label`
SELECT CASE WHEN COUNT(*) > 0 THEN 'carcinogenic' ELSE 'non-carcinogenic' END FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' AND T2.label = '+'
SELECT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'c'
SELECT T1.element AS Element1, T2.element AS Element2 FROM connected AS T3 INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id INNER JOIN atom AS T2 ON T3.atom_id2 = T2.atom_id WHERE T3.bond_id = 'TR001_10_11'
SELECT CAST(COUNT(DISTINCT T1.molecule_id) AS REAL) * 100 / (SELECT COUNT(DISTINCT molecule_id) FROM molecule) FROM bond AS T1 WHERE T1.bond_type = '#'
SELECT CAST(SUM(CASE WHEN T1.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1' AND T1.label = '+'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE `label` = '+' AND `molecule_id` = 'TR151'
SELECT `atom`.`element` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = 'TR151' AND `atom`.`element` IN ('pb', 'te', 'br', 'i', 'sn')
SELECT COUNT(DISTINCT `molecule_id`) FROM `molecule` WHERE `label` = '+'
SELECT `atom_id` FROM `atom` WHERE `element` = 'c' AND substr(`molecule_id`, 3, 3) >= 10 AND substr(`molecule_id`, 3, 3) <= 50
SELECT COUNT(DISTINCT `atom`.`atom_id`) FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+'
SELECT `connected`.`bond_id` FROM `connected` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond`.`bond_type` = ' = ' AND `molecule`.`label` = '+'
SELECT COUNT(`atom`.`atom_id`) FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`element` = 'h' AND `molecule`.`label` = '+'
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = 'TR000_1_2' AND T3.element = 'TR000_1'
SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT CAST(SUM(CASE WHEN `molecule`.`label` = '+' AND `atom`.`element` = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id`
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS IsCarcinogenic FROM molecule WHERE `label` = '+' AND `molecule_id` = 'TR124'
SELECT `atom`.`element` FROM `atom` WHERE `atom`.`molecule_id` = 'TR186'
SELECT `bond_type` FROM `bond` WHERE `molecule_id` = 'TR007_4_19'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_2_4'
SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.molecule_id = 'TR006' GROUP BY T2.label
SELECT `molecule`.`label`, `atom`.`element` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `molecule`.`label` = '+'
SELECT `bond`.`bond_id`, `atom`.`atom_id`, `atom`.`element` FROM `bond` INNER JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` INNER JOIN `atom` ON `connected`.`atom_id` = `atom`.`atom_id` WHERE `bond`.`bond_type` = '-'
SELECT DISTINCT m.`label`, a.`element` FROM `molecule` AS m INNER JOIN `bond` AS b ON m.`molecule_id` = b.`molecule_id` INNER JOIN `connected` AS c ON b.`bond_id` = c.`bond_id` INNER JOIN `atom` AS a ON c.`atom_id` = a.`atom_id` WHERE b.`bond_type` = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_2_3'
SELECT COUNT(`bond_id`) FROM `connected` WHERE `atom_id` IN (SELECT `atom_id` FROM `atom` WHERE `element` = 'cl') AND `atom_id2` IN (SELECT `atom_id` FROM `atom` WHERE `element` = 'cl')
SELECT `atom_id`, COUNT(DISTINCT `bond_type`) AS bond_type_count FROM `atom` INNER JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `atom`.`molecule_id` = 'TR346' GROUP BY `atom_id`
SELECT COUNT(DISTINCT T1.molecule_id) AS total_molecules_with_double_bond, SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_molecules FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = '
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` LEFT JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` LEFT JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` WHERE `atom`.`element` != 's' AND (`bond`.`bond_type` != ' = ' OR `bond`.`bond_type` IS NULL)
SELECT `molecule`.`label` FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond`.`bond_id` = 'TR001_2_4' AND `molecule`.`label` = '+'
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'
SELECT COUNT(*) FROM bond WHERE bond_type = '-'
SELECT DISTINCT `molecule`.`molecule_id`, `molecule`.`label` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` LIKE '%cl%' AND `molecule`.`label` = '+'
SELECT `molecule`.`molecule_id`, `molecule`.`label` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `atom`.`element` = 'c' AND `molecule`.`label` = '-'
SELECT CAST(SUM(CASE WHEN `molecule`.`label` = '+' AND `atom`.`element` = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT `molecule`.`molecule_id`) AS percentage FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id`
SELECT `molecule_id` FROM `bond` WHERE `bond_id` = 'TR001_1_7'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 WHERE T2.bond_id = 'TR001_3_4'
SELECT `bond_type` FROM `bond` INNER JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` INNER JOIN `atom` AS `atom1` ON `connected`.`atom_id` = `atom1`.`atom_id` INNER JOIN `atom` AS `atom2` ON `connected`.`atom_id2` = `atom2`.`atom_id` WHERE `atom1`.`element` = 'TR000_1' AND `atom2`.`element` = 'TR000_2'
SELECT T4.label FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id INNER JOIN molecule AS T4 ON T2.molecule_id = T4.molecule_id WHERE T2.atom_id = 'TR000_2' AND T3.atom_id = 'TR000_4'
SELECT `element` FROM `atom` WHERE `atom_id` = 'TR000_1'
SELECT `label` FROM `molecule` WHERE `molecule_id` = 'TR000'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `molecule`.`label` = '+' AND `atom`.`element` = 'n'
SELECT DISTINCT `molecule`.`label` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` INNER JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `atom`.`element` = 's' AND `bond`.`bond_type` = ' = '
SELECT `molecule`.`molecule_id`, `molecule`.`label` FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `molecule`.`label` = '-' GROUP BY `molecule`.`molecule_id` HAVING COUNT(`atom`.`atom_id`) > 5
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '=' AND T1.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR024')
SELECT T1.molecule_id, COUNT(T2.atom_id) AS atom_count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY atom_count DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN `molecule`.`label` = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(`molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` INNER JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `atom`.`element` = 'h' AND `bond`.`bond_type` = '#'
SELECT COUNT(DISTINCT `molecule_id`) FROM `molecule` WHERE `label` = '+'
SELECT COUNT(DISTINCT `bond`.`molecule_id`) FROM `bond` WHERE `bond`.`bond_type` = '-' AND `bond`.`molecule_id` BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(`atom_id`) FROM `atom` WHERE `molecule_id` = 'TR008' AND `element` = 'c'
SELECT `element` FROM `atom` WHERE `atom_id` = 'TR004_7' AND `molecule_id` IN (SELECT `molecule_id` FROM `molecule` WHERE `label` = '-')
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` INNER JOIN `connected` ON `atom`.`atom_id` = `connected`.`atom_id` INNER JOIN `bond` ON `connected`.`bond_id` = `bond`.`bond_id` WHERE `atom`.`element` = 'o' AND `bond`.`bond_type` = ' = '
SELECT COUNT(DISTINCT `molecule`.`molecule_id`) FROM `molecule` INNER JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` WHERE `bond`.`bond_type` = '#' AND `molecule`.`label` = '-'
SELECT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR002'
SELECT a.`atom_id` FROM `atom` a JOIN `connected` c ON a.`atom_id` = c.`atom_id` JOIN `bond` b ON c.`bond_id` = b.`bond_id` JOIN `molecule` m ON a.`molecule_id` = m.`molecule_id` WHERE a.`element` = 'c' AND b.`bond_type` = ' = ' AND m.`label` = 'TR012'
SELECT `atom`.`atom_id` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+' AND `atom`.`element` = 'o'
SELECT `name` FROM `cards` WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL
SELECT `name` FROM `cards` WHERE `borderColor` = 'borderless' AND (`cardKingdomFoilId` IS NULL OR `cardKingdomId` IS NULL)
SELECT name FROM cards ORDER BY faceConvertedManaCost DESC
SELECT `name` FROM `cards` WHERE `frameVersion` = 2015 AND `edhrecRank` < 100
SELECT `cards`.`name` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`rarity` = 'mythic' AND `legalities`.`status` = 'Banned' AND `legalities`.`format` = 'gladiator'
SELECT T1.name, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT `cards`.`id`, `cards`.`artist` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE (`cards`.`power` = '*' OR `cards`.`power` IS NULL) AND `legalities`.`format` = 'commander' AND `legalities`.`status` = 'Legal'
SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'
SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'
SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(T2.uuid) DESC LIMIT 1
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'annul' AND T1.number = '29'
SELECT `cards`.`name` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Japanese'
SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid
SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT `type`) FROM `cards` WHERE `artist` = 'Aaron Boyd'
SELECT `keywords` FROM `cards` WHERE `name` = 'Angel of Mercy'
SELECT COUNT(*) FROM cards WHERE power = '*'
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT `borderColor` FROM `cards` WHERE `name` = 'Ancestor''s Chosen'
SELECT `originalType` FROM `cards` WHERE `name` = 'Ancestor\'s Chosen'
SELECT ST.language FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code INNER JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Angel of Mercy'
SELECT COUNT(`cards`.`id`) FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `legalities`.`status` = 'restricted' AND `cards`.`isTextless` = 0
SELECT r.text FROM rulings AS r INNER JOIN cards AS c ON r.uuid = c.uuid WHERE c.name = 'Condemn'
SELECT COUNT(`cards`.`id`) FROM `cards` JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `legalities`.`status` = 'restricted' AND `cards`.`isStarter` = 1
SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Cloudchaser Eagle'
SELECT `type` FROM `cards` WHERE `name` = 'Benalish Knight'
SELECT format FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight')
SELECT DISTINCT `cards`.`artist` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Phyrexian'
SELECT CAST(COUNT(CASE WHEN `borderColor` = 'borderless' THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) FROM `cards`
SELECT COUNT(*) FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.isStorySpotlight = 1
SELECT COUNT(`id`) FROM `cards` WHERE `toughness` = 99
SELECT `name` FROM `cards` WHERE `artist` = 'Aaron Boyd'
SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT `id` FROM `cards` WHERE `convertedManaCost` = 0
SELECT `layout` FROM `cards` WHERE `keywords` LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE `originalType` = 'Summon - Angel' AND `subtypes` NOT LIKE '%Angel%'
SELECT c1.id FROM cards AS c1 INNER JOIN cards AS c2 ON c1.name = c2.name WHERE c1.hasFoil = 1 AND c1.cardKingdomFoilId IS NOT NULL AND c2.hasFoil = 0 AND c2.cardKingdomId IS NOT NULL
SELECT `id` FROM `cards` WHERE `duelDeck` = 'a'
SELECT `edhrecRank` FROM `cards` WHERE `frameVersion` = '2015'
SELECT `cards`.`artist` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Chinese Simplified'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'white' AND `uuid` IN (SELECT `uuid` FROM legalities WHERE `status` = 'Banned')
SELECT L.uuid, F.language FROM legalities AS L INNER JOIN foreign_data AS F ON L.uuid = F.uuid WHERE L.format = 'legacy'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Beacon of Immortality'
SELECT COUNT(`cards`.`id`), `legalities`.`status` FROM `cards` JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`frameVersion` = 'future' GROUP BY `legalities`.`status`
SELECT `name`, `colors` FROM `cards` WHERE `setCode` = 'OGW'
SELECT DISTINCT `cards`.`name`, `foreign_data`.`language` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `cards`.`setCode` = '10E' AND `cards`.`convertedManaCost` = 5
SELECT `cards`.`name`, `rulings`.`date` FROM `cards` INNER JOIN `rulings` ON `cards`.`uuid` = `rulings`.`uuid` WHERE `cards`.`originalType` = 'Creature - Elf'
SELECT `colors`, `format` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`id` BETWEEN 1 AND 20
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language IS NOT NULL
SELECT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' GROUP BY T1.name ORDER BY MIN(T2.date) ASC LIMIT 3
SELECT COUNT(*) FROM `cards` WHERE `artist` = 'John Avon' AND `cardKingdomId` IS NOT NULL AND `cardKingdomFoilId` IS NULL
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE `artist` = 'UDON' AND `availability` = 'mtgo' AND `hand` = -1
SELECT COUNT(`id`) FROM `cards` WHERE `frameVersion` = '1993' AND `availability` = 'paper' AND `hasContentWarning` = 1
SELECT `manaCost` FROM `cards` WHERE `availability` = 'mtgo,paper' AND `frameVersion` = '2003' AND `borderColor` = 'black' AND `layout` = 'normal'
SELECT SUM(`manaCost`) FROM `cards` WHERE `artist` = 'Rob Alexander'
SELECT DISTINCT `subtypes`, `supertypes` FROM `cards` WHERE `availability` = 'arena'
SELECT T1.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Spanish'
SELECT (COUNT(*) * 1.0 / (SELECT COUNT(*) FROM `cards` WHERE `frameEffects` = 'legendary')) * 100 AS percentage FROM `cards` WHERE `frameEffects` = 'legendary' AND `isOnlineOnly` = 1
SELECT CAST(COUNT(CASE WHEN `isStorySpotlight` = 1 AND `isTextless` = 0 THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) FROM `cards`
SELECT `name`, CAST(COUNT(CASE WHEN `language` = 'Spanish' THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) AS percentage FROM `foreign_data` GROUP BY `name`
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309
SELECT COUNT(DISTINCT T1.setCode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Portuguese (Brasil)' AND T2.block = 'Commander'
SELECT `cards`.`id` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`types` = 'Creature' AND `legalities`.`status` = 'legal'
SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid INNER JOIN rulings AS r ON c.uuid = r.uuid WHERE l.format = 'premodern' AND r.text = 'This is a triggered mana ability.' AND c.side IS NULL
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T1.availability = 'paper' AND T2.format = 'pauper'
SELECT `artist` FROM `cards` WHERE `text` = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Matthew D. Wilson' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.type LIKE '%Creature%' AND T2.language = 'French'
SELECT COUNT(DISTINCT `cards`.`id`) FROM `cards` INNER JOIN `rulings` ON `cards`.`uuid` = `rulings`.`uuid` WHERE `cards`.`rarity` = 'rare' AND `rulings`.`date` = '2007-02-01'
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT CAST(SUM(CASE WHEN `hasContentWarning` = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`cards`.`id`) FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `legalities`.`format` = 'commander' AND `legalities`.`status` = 'legal'
SELECT CAST(SUM(CASE WHEN `foreign_data`.`language` = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `cards` LEFT JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `cards`.`power` IS NULL OR `cards`.`power` = '*'
SELECT CAST(SUM(CASE WHEN T1.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese'
SELECT DISTINCT `availability` FROM `cards` WHERE `artist` = 'Daren Bader'
SELECT COUNT(`id`) FROM `cards` WHERE `borderColor` = 'borderless' AND `edhrecRank` > 12000
SELECT COUNT(*) FROM cards WHERE `isOversized` = 1 AND `isReprint` = 1 AND `isPromo` = 1
SELECT name FROM cards WHERE power IS NULL OR power = '*' AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.multiverseId = 149934
SELECT `cardKingdomFoilId`, `cardKingdomId` FROM `cards` WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL ORDER BY `cardKingdomFoilId` ASC LIMIT 3
SELECT CAST(COUNT(CASE WHEN `isTextless` = 1 AND `layout` = 'normal' THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) FROM `cards`
SELECT `number` FROM `cards` WHERE `side` IS NULL AND `subtypes` LIKE '%Angel%' AND `subtypes` LIKE '%Wizard%'
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3
SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC'
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT `language`, `type` FROM `set_translations` WHERE `id` = 206
SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.name ASC LIMIT 2
SELECT `sets`.`id` FROM `sets` INNER JOIN `set_translations` ON `sets`.`code` = `set_translations`.`setCode` WHERE `sets`.`isForeignOnly` = 1 AND `sets`.`isFoilOnly` = 1 AND `set_translations`.`language` = 'Japanese'
SELECT sets.`name` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`language` = 'Russian' ORDER BY sets.`baseSetSize` DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN `cards`.`isOnlineOnly` = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`cards`.`isOnlineOnly`) FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Chinese Simplified'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
SELECT `id` FROM `cards` WHERE `borderColor` = 'black'
SELECT `id` FROM `cards` WHERE `frameEffects` = 'extendedart'
SELECT `name` FROM `cards` WHERE `borderColor` = 'black' AND `isFullArt` = 1
SELECT T2.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = '174'
SELECT `name` FROM `sets` WHERE `code` = 'ALL'
SELECT T2.language FROM foreign_data AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T1.name = 'A Pedra Fellwar'
SELECT `setCode` FROM `sets` WHERE `releaseDate` = '2007-07-13'
SELECT `baseSetSize`, `code` FROM `sets` WHERE `block` IN ('Masques', 'Mirage')
SELECT `code` FROM `sets` WHERE `type` = 'expansion'
SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'Boros'
SELECT T1.language, T1.flavorText, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'colorpie'
SELECT CAST(SUM(CASE WHEN `convertedManaCost` = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`id`) FROM `cards` WHERE `name` = 'Abyssal Horror'
SELECT `code` FROM `sets` WHERE `type` = 'expansion commander'
SELECT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'abzan'
SELECT `foreign_data`.`language`, `cards`.`type` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `cards`.`watermark` = 'azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL
SELECT COUNT(`id`) FROM `cards` WHERE `availability` LIKE '%paper%' AND `hand` = '3'
SELECT `name` FROM `cards` WHERE `isTextless` = 0
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor`s Chosen'
SELECT COUNT(*) FROM `cards` WHERE `borderColor` = 'white' AND (`power` = '*' OR `power` IS NULL)
SELECT `name` FROM `cards` WHERE `isPromo` = 1 AND `side` IS NOT NULL
SELECT `subtypes`, `supertypes` FROM `cards` WHERE `name` = 'Molimo, Maro-Sorcerer'
SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%'
SELECT COUNT(DISTINCT `artist`) FROM `cards` WHERE `borderColor` = 'black' AND `availability` LIKE '%arena,mtgo%'
SELECT T.name FROM ( SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ) AS T ORDER BY T.convertedManaCost DESC LIMIT 1
SELECT `artist` FROM `cards` WHERE `flavorName` = 'Battra, Dark Destroyer'
SELECT `name` FROM `cards` WHERE `frameVersion` = '2003' ORDER BY `convertedManaCost` DESC LIMIT 3
SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'
SELECT COUNT(*) FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Angel of Mercy')
SELECT c.name FROM cards AS c INNER JOIN set_translations AS st ON c.setCode = st.setCode WHERE st.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'
SELECT COUNT(*) FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE name = 'Hauptset Zehnte Edition'
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'
SELECT COUNT(*) FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL
SELECT `releaseDate` FROM `sets` WHERE `name` = 'Ancestor''s Chosen'
SELECT `type` FROM sets WHERE `name` = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL
SELECT COUNT(*) FROM sets WHERE name = 'Adarkar Valkyrie' AND isForeignOnly = 1
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 100
SELECT COUNT(`id`) FROM `cards` WHERE `setCode` = 'Coldsnap' AND `borderColor` = 'black'
SELECT `name` FROM `cards` WHERE `setCode` = 'Coldsnap' ORDER BY `convertedManaCost` DESC LIMIT 1
SELECT DISTINCT `artist` FROM `cards` WHERE `artist` IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND `name` = 'Coldsnap'
SELECT `name` FROM `cards` WHERE `number` = 4 AND `setCode` = (SELECT `code` FROM `sets` WHERE `name` = 'Coldsnap');
SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost > 5 AND (power = '*' OR power IS NULL)
SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'
SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL
SELECT T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.name = 'Ancestor''s Chosen'
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T2.uuid = T3.uuid WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian'
SELECT T1.flavorName FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Coldsnap' AND T2.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = T3.code)
SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce')
SELECT CAST(SUM(CASE WHEN `convertedManaCost` = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `cards` WHERE `name` = 'Coldsnap'
SELECT CAST(SUM(CASE WHEN `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `cards` WHERE `name` = 'Coldsnap'
SELECT `code` FROM `sets` WHERE `releaseDate` = '2017-07-14'
SELECT `keyruneCode` FROM `sets` WHERE `code` = 'PKHC'
SELECT `mcmId` FROM `sets` WHERE `code` = 'SS2'
SELECT `mcmName` FROM `sets` WHERE `releaseDate` = '2017-06-09'
SELECT `type` FROM `sets` WHERE `name` = 'From the Vault: Lore'
SELECT `parentCode` FROM `sets` WHERE `name` = 'Commander 2014 Oversized'
SELECT r.`text`, c.`hasContentWarning` FROM `cards` AS c INNER JOIN `rulings` AS r ON c.`uuid` = r.`uuid` WHERE c.`artist` = 'Jim Pavelec'
SELECT sets.releaseDate FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Evacuation'
SELECT baseSetSize FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara')
SELECT `type` FROM sets WHERE `name` = 'Huitième édition'
SELECT T2.translation FROM set_translations AS T2 INNER JOIN sets AS T1 ON T2.setCode = T1.code INNER JOIN cards AS T3 ON T1.code = T3.setCode WHERE T3.name = 'Tendo Ice Bridge' AND T2.language = 'French'
SELECT COUNT(*) FROM set_translations WHERE translation IS NOT NULL AND setCode = (SELECT code FROM sets WHERE name = 'Tenth Edition')
SELECT ST.`translation` FROM `cards` AS C INNER JOIN `set_translations` AS ST ON C.`setCode` = ST.`setCode` WHERE C.`name` = 'Fellwar Stone' AND ST.`language` = 'Japanese'
SELECT `name` FROM `cards` WHERE `name` = 'Journey into Nyx Hero''s Path' ORDER BY `convertedManaCost` DESC LIMIT 1
SELECT `releaseDate` FROM `sets` INNER JOIN `set_translations` ON `sets`.`code` = `set_translations`.`setCode` WHERE `set_translations`.`translation` = 'Ola de frío'
SELECT DISTINCT `type` FROM sets WHERE `code` IN (SELECT `setCode` FROM cards WHERE `name` = 'Samite Pilgrim')
SELECT COUNT(`id`) FROM `cards` WHERE `setCode` = (SELECT `code` FROM `sets` WHERE `name` = 'World Championship Decks 2004') AND `convertedManaCost` = '3'
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'
SELECT CAST(SUM(CASE WHEN `cards`.`isNonFoilOnly` = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Japanese'
SELECT CAST(SUM(CASE WHEN `cards`.`isOnlineOnly` = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` WHERE `foreign_data`.`language` = 'Portuguese (Brazil)'
SELECT DISTINCT `availability` FROM `cards` WHERE `artist` = 'Aleksi Briclot' AND `isTextless` = 1
SELECT `id` FROM `sets` ORDER BY `baseSetSize` DESC LIMIT 1
SELECT `artist` FROM `cards` WHERE `side` IS NULL ORDER BY `convertedManaCost` DESC LIMIT 1
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(`id`) FROM `cards` WHERE (`power` IS NULL OR `power` = '*') AND `hasFoil` = 0 AND `duelDeck` = 'a'
SELECT `id` FROM `sets` WHERE `type` = 'commander' ORDER BY `totalSetSize` DESC LIMIT 1
SELECT `name`, `manaCost` FROM `cards` WHERE `uuid` IN (SELECT `uuid` FROM `legalities` WHERE `format` = 'duel') ORDER BY `manaCost` DESC LIMIT 10
SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'legal' ORDER BY T1.originalReleaseDate ASC LIMIT 1
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French'
SELECT COUNT(`cards`.`id`) FROM `cards` JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`rarity` = 'rare' AND `cards`.`types` = 'Enchantment' AND `cards`.`name` = 'Abundance' AND `legalities`.`status` = 'Legal'
SELECT T1.format, T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' AND T1.format = (SELECT format FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(status) DESC LIMIT 1)
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Battlebond'
SELECT `cards`.`artist`, `legalities`.`format` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` GROUP BY `cards`.`artist` ORDER BY COUNT(`cards`.`artist`) ASC LIMIT 1
SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.frameVersion = '1997' AND C.artist = 'D. Alexander Gregory' AND (C.hasContentWarning = 1 OR C.artist = 'Wizards of the Coast') AND L.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'
SELECT CAST(COUNT(*) AS REAL) / 4 AS annual_average, MAX(language) AS common_language FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'
SELECT DISTINCT `artist` FROM `cards` WHERE `borderColor` = 'black' AND `availability` = 'arena'
SELECT `uuid` FROM `legalities` WHERE `format` = 'oldschool' AND (`status` = 'banned' OR `status` = 'restricted')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT r.text FROM rulings AS r INNER JOIN cards AS c ON r.uuid = c.uuid WHERE c.artist = 'Kev Walker' ORDER BY r.date DESC
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T1.setCode = T3.code WHERE T3.name = 'Hour of Devastation' AND T2.status = 'Legal'
SELECT DISTINCT s.`name` FROM sets AS s INNER JOIN set_translations AS st ON s.`code` = st.`setCode` WHERE st.`language` != 'Japanese' AND st.`language` = 'Korean'
SELECT `cards`.`frameVersion`, `cards`.`name` FROM `cards` LEFT JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`artist` = 'Allen Williams' AND (`legalities`.`status` = 'Banned' OR `legalities`.`status` IS NULL)
SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1
SELECT `DisplayName` FROM `users` WHERE YEAR(`CreationDate`) = 2011
SELECT COUNT(Id) FROM users WHERE LastAccessDate > '2014-09-01'
SELECT `DisplayName` FROM `users` ORDER BY `Views` DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE UpVotes > 100 AND DownVotes > 1
SELECT COUNT(Id) FROM users WHERE Views > 10 AND CreationDate > '2013-01-01'
SELECT COUNT(`Id`) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT `Title` FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT `OwnerDisplayName` FROM `posts` WHERE `Title` = 'Eliciting priors from experts'
SELECT `Title` FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie') ORDER BY `ViewCount` DESC LIMIT 1
SELECT `DisplayName` FROM `users` WHERE `Id` = (SELECT `OwnerUserId` FROM `posts` ORDER BY `FavoriteCount` DESC LIMIT 1)
SELECT SUM(`posts`.`CommentCount`) FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'csgillespie'
SELECT MAX(`AnswerCount`) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL
SELECT DISTINCT `users`.`DisplayName` FROM `users` INNER JOIN `posts` ON `users`.`Id` = `posts`.`OwnerUserId` WHERE `posts`.`ClosedDate` IS NOT NULL
SELECT COUNT(*) FROM `posts` WHERE `OwnerUserId` IN (SELECT `Id` FROM `users` WHERE `Age` > 65) AND `Score` >= 20
SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT `posts`.`Body` FROM `tags` INNER JOIN `posts` ON `tags`.`ExcerptPostId` = `posts`.`Id` WHERE `tags`.`TagName` = 'bayesian'
SELECT `posts`.`Body` FROM `tags` INNER JOIN `posts` ON `tags`.`ExcerptPostId` = `posts`.`Id` ORDER BY `tags`.`Count` DESC LIMIT 1
SELECT COUNT(`Id`) FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT `Name` FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT COUNT(`Id`) FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie') AND strftime('%Y', `Date`) = '2011'
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.Id) DESC LIMIT 1
SELECT AVG(`T1`.`Score`) FROM `posts` AS `T1` INNER JOIN `users` AS `T2` ON `T1`.`OwnerUserId` = `T2`.`Id` WHERE `T2`.`DisplayName` = 'csgillespie'
SELECT COUNT(`badges`.`Id`) / COUNT(DISTINCT `users`.`DisplayName`) AS average_badges FROM `users` INNER JOIN `badges` ON `users`.`Id` = `badges`.`UserId` WHERE `users`.`Views` > 200
SELECT (SUM(IIF(T2.Age > 65, 1.0, 0)) / COUNT(T1.Id)) * 100 AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5
SELECT COUNT(`Id`) FROM `votes` WHERE `UserId` = 58 AND `CreationDate` = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(`Id`) FROM `badges` WHERE `Name` = 'Revival'
SELECT `posts`.`Title` FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` ORDER BY `comments`.`Score` DESC LIMIT 1
SELECT COUNT(`comments`.`Id`) FROM `posts` INNER JOIN `comments` ON `posts`.`Id` = `comments`.`PostId` WHERE `posts`.`ViewCount` = 1910
SELECT `FavoriteCount` FROM `posts` WHERE `Id` = (SELECT `PostId` FROM `comments` WHERE `UserId` = '3025' AND `CreationDate` = '2014/4/23 20:29:39.0')
SELECT `Text` FROM `comments` WHERE `PostId` = (SELECT `Id` FROM `posts` WHERE `ParentId` = 107829 AND `CommentCount` = 1) LIMIT 1
SELECT `ClosedDate` FROM `comments` AS T1 INNER JOIN `posts` AS T2 ON T1.`PostId` = T2.`Id` WHERE T1.`UserId` = '23853' AND T1.`CreationDate` = '2013-07-12 09:08:18.0' AND T2.`ClosedDate` IS NULL
SELECT `Reputation` FROM `users` WHERE `Id` = (SELECT `OwnerUserId` FROM `posts` WHERE `Id` = '65041')
SELECT COUNT(`Id`) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Tiago Pasqualini')
SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = '6347'
SELECT COUNT(*) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data visualization%')
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(`posts`.`Id`) / COUNT(`votes`.`Id`) FROM `posts` LEFT JOIN `votes` ON `posts`.`OwnerUserId` = `votes`.`UserId` WHERE `posts`.`OwnerUserId` = 24
SELECT `ViewCount` FROM `posts` WHERE `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT `Text` FROM `comments` WHERE `Score` = 17
SELECT `DisplayName` FROM `users` WHERE `WebsiteUrl` = 'http://stackoverflow.com'
SELECT DISTINCT `Name` FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'SilentGhost')
SELECT `users`.`DisplayName` FROM `comments` INNER JOIN `users` ON `comments`.`UserId` = `users`.`Id` WHERE `comments`.`Text` = 'thank you user93!'
SELECT `Text` FROM `comments` WHERE `UserDisplayName` = 'A Lion'
SELECT T1.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'
SELECT `Text` FROM `comments` WHERE `PostId` = (SELECT `Id` FROM `posts` WHERE `Title` = 'How does gentle boosting differ from AdaBoost?')
SELECT `DisplayName` FROM `users` WHERE `Id` IN (SELECT `UserId` FROM `badges` WHERE `Name` = 'Necromancer') LIMIT 10
SELECT `LastEditorDisplayName` FROM `posts` WHERE `Title` = 'Open source tools for visualizing multi-dimensional data'
SELECT `Title` FROM `posts` WHERE `LastEditorUserId` IN (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Vebjorn Ljosa')
SELECT SUM(`posts`.`Score`), `users`.`WebsiteUrl` FROM `posts` INNER JOIN `users` ON `posts`.`LastEditorUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'Yevgeny' GROUP BY `users`.`WebsiteUrl`
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN postHistory AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND T3.UserId = T1.UserId
SELECT SUM(`BountyAmount`) FROM `votes` INNER JOIN `posts` ON `votes`.`PostId` = `posts`.`Id` WHERE `posts`.`Title` LIKE '%data%'
SELECT u.`DisplayName` FROM `votes` v INNER JOIN `posts` p ON v.`PostId` = p.`Id` INNER JOIN `users` u ON v.`UserId` = u.`Id` WHERE v.`BountyAmount` = 50 AND p.`Title` LIKE '%variance%'
SELECT `posts`.`Title`, `comments`.`Text`, AVG(`posts`.`ViewCount`) FROM `posts` INNER JOIN `comments` ON `posts`.`Id` = `comments`.`PostId` WHERE `posts`.`Tags` LIKE '%<humor>%' GROUP BY `posts`.`Id`
SELECT COUNT(`Id`) FROM `comments` WHERE `UserId` = 13
SELECT `Id` FROM `users` ORDER BY `Reputation` DESC LIMIT 1
SELECT `Id` FROM `users` ORDER BY `Views` LIMIT 1
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Supporter' AND strftime('%Y', `Date`) = '2011'
SELECT COUNT(DISTINCT `UserId`) FROM `badges` GROUP BY `UserId` HAVING COUNT(`Name`) > 5
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId INNER JOIN users AS T3 ON T1.UserId = T3.Id WHERE T1.Name = 'Teachers' AND T2.Name = 'Supporter' AND T3.Location = 'New York'
SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
SELECT T1.UserId FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount >= 1000 GROUP BY T1.UserId, T1.PostId HAVING COUNT(T1.PostId) = 1
SELECT `users`.`Id`, `badges`.`Name` FROM `users` INNER JOIN `comments` ON `users`.`Id` = `comments`.`UserId` LEFT JOIN `badges` ON `users`.`Id` = `badges`.`UserId` GROUP BY `users`.`Id` ORDER BY COUNT(`comments`.`Id`) DESC LIMIT 1
SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'
SELECT (COUNT(CASE WHEN strftime('%Y', `Date`) = '2010' THEN 1 END) * 100.0 / COUNT(*)) - (COUNT(CASE WHEN strftime('%Y', `Date`) = '2011' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_difference FROM `badges` WHERE `Name` = 'Student'
SELECT PostHistoryTypeId, COUNT(DISTINCT comments.UserId) FROM postHistory LEFT JOIN comments ON postHistory.PostId = comments.PostId WHERE postHistory.PostId = 3720 GROUP BY PostHistoryTypeId
SELECT `posts`.`Id`, `posts`.`Title`, `posts`.`ViewCount` FROM `posts` INNER JOIN `postLinks` ON `posts`.`Id` = `postLinks`.`RelatedPostId` WHERE `postLinks`.`PostId` = 61217
SELECT `Score`, `LinkTypeId` FROM `posts` INNER JOIN `postLinks` ON `posts`.`Id` = `postLinks`.`PostId` WHERE `posts`.`Id` = 395
SELECT `Id`, `OwnerUserId` FROM `posts` WHERE `Score` > 60
SELECT SUM(`FavoriteCount`) FROM `posts` WHERE `OwnerUserId` = 686 AND strftime('%Y', `CreaionDate`) = '2011'
SELECT CAST(SUM(`users`.`UpVotes`) AS REAL) / COUNT(`users`.`Id`) AS `average_up_votes`, CAST(SUM(`users`.`Age`) AS REAL) / COUNT(`users`.`Id`) AS `average_age` FROM `users` INNER JOIN `posts` ON `users`.`Id` = `posts`.`OwnerUserId` GROUP BY `users`.`Id` HAVING COUNT(`posts`.`Id`) > 10
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Announcer'
SELECT `Name` FROM `badges` WHERE `Date` = '2010-07-19 19:39:08.0'
SELECT COUNT(*) FROM comments WHERE Score > 60
SELECT `Text` FROM `comments` WHERE `CreationDate` = '2010-07-19 19:25:47.0'
SELECT COUNT(*) FROM posts WHERE `Score` = 10;
SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT DISTINCT `Name` FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Pierre')
SELECT `Date` FROM `badges` WHERE `UserId` IN (SELECT `Id` FROM `users` WHERE `Location` = 'Rochester, NY')
SELECT CAST(SUM(CASE WHEN `Name` = 'Teacher' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM badges
SELECT CAST(COUNT(CASE WHEN T2.Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(T2.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'
SELECT `Score` FROM `comments` WHERE `CreationDate` = '2010-07-19 19:19:56.0'
SELECT `Text` FROM `comments` WHERE `CreationDate` = '2010-07-19 19:37:33.0'
SELECT `users`.`age` FROM `users` INNER JOIN `badges` ON `users`.`Id` = `badges`.`UserId` WHERE `users`.`Location` = 'Vienna, Austria'
SELECT COUNT(DISTINCT `users`.`Id`) FROM `users` INNER JOIN `badges` ON `users`.`Id` = `badges`.`UserId` WHERE `badges`.`Name` = 'Supporter' AND `users`.`Age` BETWEEN 19 AND 65
SELECT SUM(views) FROM users INNER JOIN badges ON users.Id = badges.UserId WHERE badges.Date = '2010-07-19 19:39:08.0'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT DISTINCT `Name` FROM `badges` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Sharpie')
SELECT COUNT(`users`.`Id`) FROM `users` INNER JOIN `badges` ON `users`.`Id` = `badges`.`UserId` WHERE `users`.`Age` > 65 AND `badges`.`Name` = 'Supporter'
SELECT `DisplayName` FROM `users` WHERE `Id` = 30
SELECT COUNT(*) FROM `users` WHERE `Location` = 'New York'
SELECT COUNT(*) FROM `votes` WHERE YEAR(`CreationDate`) = 2010
SELECT COUNT(`Id`) FROM `users` WHERE `Age` BETWEEN 19 AND 65
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN strftime('%Y', `CreationDate`) = '2010' THEN `Id` ELSE NULL END) AS REAL) / COUNT(CASE WHEN strftime('%Y', `CreationDate`) = '2011' THEN `Id` ELSE NULL END) FROM `votes`
SELECT DISTINCT T2.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T1.DisplayName = 'John Salvatier'
SELECT COUNT(`Id`) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Daniel Vassallo')
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')
SELECT `Id` FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'slashnick') ORDER BY `AnswerCount` DESC LIMIT 1
SELECT `OwnerDisplayName`, SUM(`ViewCount`) AS total_views FROM `posts` WHERE `OwnerDisplayName` IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY `OwnerDisplayName` ORDER BY total_views DESC LIMIT 1
SELECT COUNT(`posts`.`Id`) FROM `posts` JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` JOIN `votes` ON `posts`.`Id` = `votes`.`PostId` WHERE `users`.`DisplayName` = 'Matt Parker' AND `votes`.`PostId` > 4
SELECT COUNT(`comments`.`Id`) FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'Neil McGuigan' AND `comments`.`Score` < 60
SELECT DISTINCT `posts`.`Tags` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'Mark Meckes' AND `posts`.`CommentCount` = 0
SELECT `DisplayName` FROM `users` WHERE `Id` IN (SELECT `UserId` FROM `badges` WHERE `Name` = 'Organizer')
SELECT CAST(COUNT(DISTINCT CASE WHEN T1.TagName = 'r' THEN T2.PostId END) AS REAL) * 100 / COUNT(DISTINCT T2.PostId) AS percentage FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.OwnerDisplayName = 'Community'
SELECT SUM(CASE WHEN `OwnerDisplayName` = 'Mornington' THEN `ViewCount` ELSE 0 END) - SUM(CASE WHEN `OwnerDisplayName` = 'Amos' THEN `ViewCount` ELSE 0 END) FROM `posts`
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Commentator' AND strftime('%Y', `Date`) = '2014'
SELECT COUNT(`Id`) FROM `posts` WHERE `CreationDate` BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT `DisplayName`, `Age` FROM `users` WHERE `Views` = (SELECT MAX(`Views`) FROM `users`)
SELECT `LastEditDate`, `LastEditorUserId` FROM `posts` WHERE `Title` = 'Detecting a given face in a database of facial images'
SELECT COUNT(`Id`) FROM `comments` WHERE `UserId` = 13 AND `Score` < 60
SELECT p.Title, u.DisplayName FROM comments c INNER JOIN posts p ON c.PostId = p.Id INNER JOIN users u ON c.UserId = u.Id WHERE c.Score > 60
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND strftime('%Y', T1.Date) = '2011'
SELECT `users`.`DisplayName`, `users`.`WebsiteUrl` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `posts`.`FavoriteCount` > 150
SELECT COUNT(`Id`), MAX(`LastEditDate`) FROM `posts` WHERE `Title` = 'What is the best introductory Bayesian statistics textbook?'
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Outliers' ORDER BY T1.LastAccessDate DESC LIMIT 1
SELECT T2.Title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.ParentId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'
SELECT `posts`.`Id` AS `PostId`, `badges`.`Name` AS `BadgeName` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` INNER JOIN `badges` ON `users`.`Id` = `badges`.`UserId` WHERE `users`.`UserDisplayName` = 'Samuel' AND YEAR(`posts`.`CreationDate`) = 2013 AND YEAR(`badges`.`Date`) = 2013
SELECT `OwnerDisplayName` FROM `posts` ORDER BY `ViewCount` DESC LIMIT 1
SELECT `users`.`DisplayName`, `users`.`Location` FROM `users` INNER JOIN `posts` ON `users`.`Id` = `posts`.`OwnerUserId` INNER JOIN `tags` ON `posts`.`Id` = `tags`.`ExcerptPostId` WHERE `tags`.`TagName` = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')
SELECT `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `posts`.`ParentId` IS NOT NULL ORDER BY `posts`.`Score` DESC LIMIT 1
SELECT `users`.`DisplayName`, `users`.`WebsiteUrl` FROM `votes` INNER JOIN `users` ON `votes`.`UserId` = `users`.`Id` WHERE `votes`.`VoteTypeId` = 8 ORDER BY `votes`.`BountyAmount` DESC LIMIT 1
SELECT `Title` FROM `posts` ORDER BY `ViewCount` DESC LIMIT 5
SELECT COUNT(*) FROM `tags` WHERE `Count` BETWEEN 5000 AND 7000
SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1
SELECT age FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(DISTINCT `posts`.`Id`) FROM `posts` INNER JOIN `votes` ON `posts`.`Id` = `votes`.`PostId` WHERE `posts`.`CreationDate` >= '2011-01-01' AND `posts`.`CreationDate` < '2012-01-01' AND `votes`.`BountyAmount` = 50
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)
SELECT SUM(`Score`) FROM `posts` WHERE `LasActivityDate` LIKE '2010-07-19%'
SELECT COUNT(`postLinks`.`Id`) / 12 FROM `postLinks` JOIN `posts` ON `postLinks`.`PostId` = `posts`.`Id` WHERE YEAR(`postLinks`.`CreationDate`) = 2010 AND `posts`.`AnswerCount` <= 2
SELECT `PostId` FROM `votes` WHERE `UserId` = 1465 AND `PostId` IN (SELECT `Id` FROM `posts` ORDER BY `FavoriteCount` DESC LIMIT 1)
SELECT `posts`.`Title` FROM `postLinks` INNER JOIN `posts` ON `postLinks`.`PostId` = `posts`.`Id` ORDER BY `postLinks`.`CreationDate` LIMIT 1
SELECT `DisplayName` FROM `users` WHERE `Id` = (SELECT `UserId` FROM `badges` GROUP BY `UserId` ORDER BY COUNT(`Name`) DESC LIMIT 1)
SELECT MIN(`CreationDate`) FROM `votes` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'chl')
SELECT `posts`.`CreaionDate` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`Age` = (SELECT MIN(`Age`) FROM `users`) ORDER BY `posts`.`CreaionDate` ASC LIMIT 1
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1)
SELECT COUNT(DISTINCT `users`.`Id`) FROM `users` INNER JOIN `posts` ON `users`.`Id` = `posts`.`OwnerUserId` WHERE `users`.`Location` = 'United Kingdom' AND `posts`.`FavoriteCount` >= 4
SELECT AVG(`votes`.`PostId`) FROM `votes` INNER JOIN `users` ON `votes`.`UserId` = `users`.`Id` WHERE `users`.`Age` = (SELECT MAX(`Age`) FROM `users`)
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(Id) FROM users WHERE Reputation > 2000 AND Views > 1000
SELECT `DisplayName` FROM `users` WHERE `Age` BETWEEN 19 AND 65
SELECT COUNT(`Id`) FROM `posts` WHERE `OwnerUserId` IN (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Jay Stevens') AND YEAR(`CreationDate`) = 2010
SELECT `Id`, `Title` FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Harvey Motulsky') ORDER BY `ViewCount` DESC LIMIT 1
SELECT `Id`, `Title` FROM `posts` ORDER BY `Score` DESC LIMIT 1;
SELECT AVG(`T2`.`Score`) FROM `users` AS `T1` INNER JOIN `posts` AS `T2` ON `T2`.`OwnerUserId` = `T1`.`Id` WHERE `T1`.`DisplayName` = 'Stephen Turner'
SELECT `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `posts`.`ViewCount` > 20000 AND YEAR(`posts`.`CreationDate`) = 2011
SELECT `posts`.`Id`, `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `posts`.`CreationDate` LIKE '2010%' ORDER BY `posts`.`FavoriteCount` DESC LIMIT 1
SELECT CAST(COUNT(DISTINCT p.`Id`) AS REAL) * 100 / COUNT(p.`Id`) FROM `posts` AS p INNER JOIN `users` AS u ON p.`OwnerUserId` = u.`Id` WHERE strftime('%Y', p.`CreaionDate`) = '2011' AND u.`Reputation` > 1000
SELECT CAST(COUNT(CASE WHEN `Age` BETWEEN 13 AND 19 THEN `Id` END) AS REAL) / COUNT(`Id`) * 100 AS percentage FROM `users`
SELECT `posts`.`ViewCount`, `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`LastEditorUserId` = `users`.`Id` WHERE `posts`.`Text` = 'Computer Game Datasets'
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(`comments`.`Id`) FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` WHERE `posts`.`Score` = (SELECT MAX(`Score`) FROM `posts`)
SELECT COUNT(`Id`) FROM `posts` WHERE `ViewCount` > 35000 AND `CommentCount` = 0
SELECT `T1`.`DisplayName`, `T1`.`Location` FROM `users` AS `T1` INNER JOIN `posts` AS `T2` ON `T1`.`Id` = `T2`.`LastEditorUserId` WHERE `T2`.`Id` = 183 ORDER BY `T2`.`LastEditDate` DESC LIMIT 1
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1
SELECT COUNT(`Id`) FROM `users` WHERE `Age` BETWEEN 19 AND 65 AND `UpVotes` > 5000
SELECT JULIANDAY(`badges`.`Date`) - JULIANDAY(`users`.`CreationDate`) AS days_to_badge FROM `badges` INNER JOIN `users` ON `badges`.`UserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'Zolomon'
SELECT COUNT(DISTINCT p.Id) AS post_count, COUNT(DISTINCT c.Id) AS comment_count FROM users u LEFT JOIN posts p ON u.Id = p.OwnerUserId LEFT JOIN comments c ON u.Id = c.UserId WHERE u.CreationDate = (SELECT MAX(CreationDate) FROM users)
SELECT `comments`.`Text`, `users`.`DisplayName` FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` INNER JOIN `users` ON `comments`.`UserId` = `users`.`Id` WHERE `posts`.`Title` = 'Analysing wind data with R' ORDER BY `comments`.`CreationDate` DESC LIMIT 10
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Citizen Patrol'
SELECT COUNT(`Id`) FROM `posts` WHERE `Tags` LIKE '%careers%'
SELECT `Reputation`, `Views` FROM `users` WHERE `DisplayName` = 'Jarrod Dixon'
SELECT COUNT(`comments`.`Id`) AS CommentCount, COUNT(`posts`.`Id`) AS AnswerCount FROM `posts` LEFT JOIN `comments` ON `posts`.`Id` = `comments`.`PostId` WHERE `posts`.`Title` = 'Clustering 1D data'
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount >= 30
SELECT CAST(SUM(CASE WHEN T1.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM `posts` WHERE `Score` < 20
SELECT COUNT(`Id`) FROM `tags` WHERE `Id` < 15 AND `Count` <= 20
SELECT `ExcerptPostId`, `WikiPostId` FROM `tags` WHERE `TagName` = 'sample'
SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'
SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%linear regression%'
SELECT `Text` FROM `comments` WHERE `PostId` IN (SELECT `Id` FROM `posts` WHERE `ViewCount` BETWEEN 100 AND 150) ORDER BY `Score` DESC LIMIT 1
SELECT `users`.`CreationDate`, `users`.`Age` FROM `users` INNER JOIN `comments` ON `users`.`Id` = `comments`.`UserId` WHERE `comments`.`Text` LIKE '%http://%'
SELECT COUNT(DISTINCT `comments`.`PostId`) FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` WHERE `comments`.`Score` = 0 AND `posts`.`ViewCount` < 5
SELECT COUNT(`comments`.`Id`) FROM `posts` INNER JOIN `comments` ON `posts`.`Id` = `comments`.`PostId` WHERE `posts`.`CommentCount` = 1 AND `comments`.`Score` = 0
SELECT COUNT(DISTINCT `comments`.`UserId`) FROM `comments` INNER JOIN `users` ON `comments`.`UserId` = `users`.`Id` WHERE `comments`.`Score` = 0 AND `users`.`Age` = 40
SELECT `Id`, `CommentCount` FROM `posts` WHERE `Title` = 'Group differences on a five point Likert item'
SELECT users.`UpVotes` FROM users INNER JOIN comments ON users.`Id` = comments.`UserId` WHERE comments.`Text` = 'R is also lazy evaluated.'
SELECT `Text` FROM `comments` WHERE `UserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'Harvey Motulsky')
SELECT `UserDisplayName` FROM `comments` JOIN `users` ON `comments`.`UserId` = `users`.`Id` WHERE `comments`.`Score` BETWEEN 1 AND 5 AND `users`.`DownVotes` = 0
SELECT CAST(COUNT(CASE WHEN `users`.`UpVotes` = 0 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(`comments`.`UserId`) FROM `comments` INNER JOIN `users` ON `comments`.`UserId` = `users`.`Id` WHERE `comments`.`Score` BETWEEN 5 AND 10
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = '3-D Man'
SELECT COUNT(DISTINCT T1.`id`) FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `superpower` AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Super Strength'
SELECT COUNT(*) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T2.height_cm > 200
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` GROUP BY `superhero`.`id` HAVING COUNT(`hero_power`.`power_id`) > 15
SELECT COUNT(`superhero`.`id`) FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `colour`.`colour` = 'Blue'
SELECT `colour`.`colour` FROM `superhero` INNER JOIN `colour` ON `superhero`.`skin_colour_id` = `colour`.`id` WHERE `superhero`.`superhero_name` = 'Apocalypse'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `colour` AS `eye_colour` ON `superhero`.`eye_colour_id` = `eye_colour`.`id` INNER JOIN `colour` AS `hair_colour` ON `superhero`.`hair_colour_id` = `hair_colour`.`id` WHERE `eye_colour`.`colour` = 'Blue' AND `hair_colour`.`colour` = 'Blond'
SELECT COUNT(DISTINCT `superhero`.`id`) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher`.`publisher_name` = 'Marvel Comics'
SELECT `superhero_name`, `height_cm` FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher_name` = 'Marvel Comics' ORDER BY `height_cm` DESC
SELECT T2.publisher_name FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT `colour`.`colour`, COUNT(`superhero`.`id`) AS `count` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher`.`publisher_name` = 'Marvel Comics' GROUP BY `colour`.`colour` ORDER BY `count` DESC
SELECT AVG(`superhero`.`height_cm`) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher`.`publisher_name` = 'Marvel Comics';
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `superpower` AS T3 ON T2.`power_id` = T3.`id` INNER JOIN `publisher` AS T4 ON T1.`publisher_id` = T4.`id` WHERE T4.`publisher_name` = 'Marvel Comics' AND T3.`power_name` = 'Super Strength'
SELECT COUNT(DISTINCT `id`) FROM `superhero` WHERE `publisher_id` = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'DC Comics')
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value ASC LIMIT 1
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.`hair_colour_id` = T2.`id` WHERE T2.`colour` = 'Blond'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.`attribute_name` = 'Durability' AND T2.`attribute_value` < 50
SELECT `superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.id = T2.hero_id INNER JOIN `superpower` AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100
SELECT `superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.id = T2.hero_id GROUP BY T1.id ORDER BY COUNT(T2.power_id) DESC LIMIT 1
SELECT COUNT(`id`) FROM `superhero` WHERE `race_id` = (SELECT `id` FROM `race` WHERE `race` = 'Vampire')
SELECT CAST(COUNT(CASE WHEN `T1`.`alignment_id` = (SELECT `id` FROM `alignment` WHERE `alignment` = 'Bad') THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(`T1`.`id`) AS percentage_bad, COUNT(CASE WHEN `T1`.`publisher_id` = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'Marvel Comics') THEN 1 ELSE NULL END) AS marvel_bad FROM `superhero` AS `T1`
SELECT COUNT(CASE WHEN T1.publisher_id = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'Marvel Comics') THEN T1.id ELSE NULL END) - COUNT(CASE WHEN T1.publisher_id = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'DC Comics') THEN T1.id ELSE NULL END) AS difference FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.publisher_id = T2.id
SELECT `id` FROM `publisher` WHERE `publisher_name` = 'Star Trek'
SELECT AVG(`attribute_value`) FROM `hero_attribute`
SELECT COUNT(*) FROM `superhero` WHERE `full_name` IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(`superhero`.`weight_kg`) FROM `superhero` INNER JOIN `gender` ON `superhero`.`gender_id` = `gender`.`id` WHERE `gender`.`gender` = 'Female'
SELECT DISTINCT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T4.gender = 'Male' LIMIT 5
SELECT `superhero_name` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Alien'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`height_cm` BETWEEN 170 AND 190 AND `colour`.`colour` = 'No Colour'
SELECT T2.`power_name` FROM `hero_power` AS T1 INNER JOIN `superpower` AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = 56
SELECT `full_name` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Demi-God' LIMIT 5
SELECT COUNT(*) FROM `superhero` WHERE `alignment_id` = 'Bad'
SELECT `race`.`race` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`weight_kg` = 169
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T1.race_id = (SELECT id FROM race WHERE race = 'human') AND T1.height_cm = 185
SELECT `colour`.`colour` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` ORDER BY `superhero`.`weight_kg` DESC LIMIT 1
SELECT CAST(COUNT(CASE WHEN `publisher`.`publisher_name` = 'Marvel Comics' THEN `superhero`.`id` ELSE NULL END) AS REAL) * 100 / COUNT(`superhero`.`id`) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `superhero`.`height_cm` BETWEEN 150 AND 180
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg > (SELECT 0.79 * AVG(weight_kg) FROM superhero)
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` GROUP BY T2.`power_name` ORDER BY COUNT(T2.`power_name`) DESC LIMIT 1
SELECT T2.attribute_value FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'
SELECT T2.`power_name` FROM `hero_power` AS T1 INNER JOIN `superpower` AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = 1
SELECT COUNT(DISTINCT `hero_power`.`hero_id`) FROM `hero_power` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'stealth'
SELECT T1.`full_name` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `attribute` AS T3 ON T2.`attribute_id` = T3.`id` WHERE T3.`attribute_name` = 'strength' ORDER BY T2.`attribute_value` DESC LIMIT 1
SELECT CAST(COUNT(`superhero`.`id`) AS REAL) / SUM(IIF(`skin_colour_id` = 1, 1, 0)) AS average FROM `superhero`
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.`publisher_id` = T2.`id` INNER JOIN `hero_attribute` AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN `attribute` AS T4 ON T3.`attribute_id` = T4.`id` WHERE T2.`publisher_name` = 'Dark Horse Comics' AND T4.`attribute_name` = 'durability' ORDER BY T3.`attribute_value` DESC LIMIT 1
SELECT `colour`.`colour` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`full_name` = 'Abraham Sapien'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'Flight'
SELECT T1.eye_colour_id AS eyes, T1.hair_colour_id AS hair, T1.skin_colour_id AS skin_colour FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'
SELECT T1.`superhero_name`, T2.`publisher_name` FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`hair_colour_id` = T1.`skin_colour_id` AND T1.`hair_colour_id` = T1.`eye_colour_id`
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'
SELECT CAST(SUM(CASE WHEN `colour`.`colour` = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `superhero` INNER JOIN `gender` ON `superhero`.`gender_id` = `gender`.`id` INNER JOIN `colour` ON `superhero`.`skin_colour_id` = `colour`.`id` WHERE `gender`.`gender` = 'Female'
SELECT `superhero`.`superhero_name`, `race`.`race` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`full_name` = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id WHERE T1.superhero_name = 'Agent 13'
SELECT `superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `superpower` AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Adaptation'
SELECT COUNT(*) FROM `hero_power` WHERE `hero_id` = (SELECT `id` FROM `superhero` WHERE `superhero_name` = 'Amazo')
SELECT T2.power_name FROM `superhero` AS T1 INNER JOIN `hero_power` AS T3 ON T1.id = T3.hero_id INNER JOIN `superpower` AS T2 ON T3.power_id = T2.id WHERE T1.full_name = 'Hunter Zolomon'
SELECT `superhero`.`height_cm` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `colour`.`colour` = 'Amber'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `colour` AS `eye_colour` ON `superhero`.`eye_colour_id` = `eye_colour`.`id` INNER JOIN `colour` AS `hair_colour` ON `superhero`.`hair_colour_id` = `hair_colour`.`id` WHERE `eye_colour`.`colour` = 'Black' AND `hair_colour`.`colour` = 'Black'
SELECT `superhero`.`eye_colour_id` FROM `superhero` INNER JOIN `colour` ON `superhero`.`skin_colour_id` = `colour`.`id` WHERE `colour`.`colour` = 'Gold'
SELECT `full_name` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Vampire'
SELECT `superhero_name` FROM `superhero` INNER JOIN `alignment` ON `superhero`.`alignment_id` = `alignment`.`id` WHERE `alignment`.`alignment` = 'Neutral'
SELECT COUNT(DISTINCT `hero_id`) FROM `hero_attribute` WHERE `attribute_value` = (SELECT MAX(`attribute_value`) FROM `hero_attribute` INNER JOIN `attribute` ON `hero_attribute`.`attribute_id` = `attribute`.`id` WHERE `attribute`.`attribute_name` = 'Strength')
SELECT T1.race, T2.alignment FROM `race` AS T1 INNER JOIN `superhero` AS T3 ON T1.id = T3.race_id INNER JOIN `alignment` AS T2 ON T2.id = T3.alignment_id WHERE T3.superhero_name = 'Cameron Hicks'
SELECT CAST(COUNT(CASE WHEN T1.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) / COUNT(T1.id) * 100 AS percent FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT AVG(`superhero`.`weight_kg`) FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Alien'
SELECT (SELECT weight_kg FROM `superhero` WHERE `full_name` = 'Emil Blonsky') - (SELECT weight_kg FROM `superhero` WHERE `full_name` = 'Charles Chandler')
SELECT `superhero_name`, `full_name`, CAST(SUM(`height_cm`) AS REAL) / COUNT(*) AS average_height FROM `superhero` GROUP BY `superhero_name`, `full_name`
SELECT `superpower`.`power_name` FROM `superhero` JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superhero`.`superhero_name` = 'Abomination'
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `gender` AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.id = 1
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_attribute` ON `superhero`.`id` = `hero_attribute`.`hero_id` INNER JOIN `attribute` ON `hero_attribute`.`attribute_id` = `attribute`.`id` WHERE `attribute`.`attribute_name` = 'Speed' ORDER BY `hero_attribute`.`attribute_value` DESC LIMIT 1
SELECT COUNT(*) FROM `superhero` WHERE `alignment_id` = 3
SELECT `attribute`.`attribute_name`, `hero_attribute`.`attribute_value` FROM `superhero` INNER JOIN `hero_attribute` ON `superhero`.`id` = `hero_attribute`.`hero_id` INNER JOIN `attribute` ON `hero_attribute`.`attribute_id` = `attribute`.`id` WHERE `superhero`.`superhero_name` = '3-D Man'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `colour` AS `eye_colour` ON `superhero`.`eye_colour_id` = `eye_colour`.`id` INNER JOIN `colour` AS `hair_colour` ON `superhero`.`hair_colour_id` = `hair_colour`.`id` WHERE `eye_colour`.`colour` = 'Blue' AND `hair_colour`.`colour` = 'Brown'
SELECT `publisher`.`publisher_name` FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `superhero`.`superhero_name` IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM `superhero` WHERE `publisher_id` = 1
SELECT CAST(SUM(CASE WHEN `eye_colour_id` = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`id`) FROM `superhero`
SELECT CAST(COUNT(CASE WHEN T1.gender_id = 1 THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.gender_id = 2 THEN 1 ELSE NULL END) AS RATIO FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id
SELECT `superhero_name` FROM `superhero` ORDER BY `height_cm` DESC LIMIT 1
SELECT `id` FROM `superpower` WHERE `power_name` = 'cryokinesis'
SELECT `superhero_name` FROM `superhero` WHERE `id` = 294
SELECT `full_name` FROM `superhero` WHERE `weight_kg` = 0 OR `weight_kg` IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T2.`power_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN `superpower` AS T2 ON T3.`power_id` = T2.`id` WHERE T1.`full_name` = 'Helen Parr'
SELECT r.race FROM superhero AS s INNER JOIN race AS r ON s.race_id = r.id WHERE s.weight_kg = 108 AND s.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.id = 38
SELECT race.`race` FROM superhero INNER JOIN hero_attribute ON superhero.`id` = hero_attribute.`hero_id` INNER JOIN race ON superhero.`race_id` = race.`id` ORDER BY hero_attribute.`attribute_value` DESC LIMIT 1
SELECT T1.alignment, T2.power_name FROM superhero AS T3 INNER JOIN alignment AS T1 ON T3.alignment_id = T1.id INNER JOIN hero_power AS T4 ON T3.id = T4.hero_id INNER JOIN superpower AS T2 ON T4.power_id = T2.id WHERE T3.superhero_name = 'Atom IV'
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `colour`.`colour` = 'Blue' LIMIT 5
SELECT AVG(`attribute_value`) FROM `hero_attribute` AS T1 INNER JOIN `superhero` AS T2 ON T1.`hero_id` = T2.`id` WHERE T2.`alignment_id` = 3
SELECT T1.`skin_colour_id` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` WHERE T2.`attribute_value` = 100
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `gender` AS T2 ON T1.gender_id = T2.id INNER JOIN `alignment` AS T3 ON T1.alignment_id = T3.id WHERE T2.id = 2 AND T3.id = 1
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_attribute` ON `superhero`.`id` = `hero_attribute`.`hero_id` WHERE `hero_attribute`.`attribute_value` BETWEEN 75 AND 80
SELECT T3.`race` FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.`hair_colour_id` = T2.`id` INNER JOIN `race` AS T3 ON T1.`race_id` = T3.`id` INNER JOIN `gender` AS T4 ON T1.`gender_id` = T4.`id` WHERE T2.`colour` = 'blue' AND T4.`gender` = 'male'
SELECT (CAST(SUM(CASE WHEN `gender`.`id` = 2 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 AS percentage FROM `superhero` INNER JOIN `alignment` ON `superhero`.`alignment_id` = `alignment`.`id` INNER JOIN `gender` ON `superhero`.`gender_id` = `gender`.`id` WHERE `alignment`.`id` = 2
SELECT COUNT(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE NULL END) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.`skin_colour_id` = T2.`id` INNER JOIN `alignment` AS T3 ON T1.`alignment_id` = T3.`id` WHERE T2.`colour` = 'Green' AND T3.`alignment` = 'Bad'
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `gender` AS T2 ON T1.gender_id = T2.id INNER JOIN `publisher` AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'Wind Control' ORDER BY `superhero`.`superhero_name` ASC
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.gender_id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force'
SELECT `superhero_name` FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher_name` = 'DC Comics' ORDER BY `weight_kg` DESC LIMIT 1
SELECT AVG(`superhero`.`height_cm`) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `publisher`.`publisher_name` = 'Dark Horse Comics' AND `race`.`race` <> 'Human';
SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100
SELECT COUNT(CASE WHEN T1.publisher_id = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'DC Comics') THEN T1.id ELSE NULL END) - COUNT(CASE WHEN T1.publisher_id = (SELECT `id` FROM `publisher` WHERE `publisher_name` = 'Marvel Comics') THEN T1.id ELSE NULL END) AS difference FROM `superhero` AS T1
SELECT T2.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1
SELECT `colour`.`colour` FROM `superhero` JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`superhero_name` = 'Abomination'
SELECT `superhero_name` FROM `superhero` ORDER BY `height_cm` DESC LIMIT 1
SELECT `superhero_name` FROM `superhero` WHERE `full_name` = 'Charles Chandler'
SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100.0 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T3.publisher_name = 'George Lucas'
SELECT CAST(SUM(CASE WHEN `alignment`.`alignment` = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` INNER JOIN `alignment` ON `superhero`.`alignment_id` = `alignment`.`id` WHERE `publisher`.`publisher_name` = 'Marvel Comics'
SELECT COUNT(*) FROM `superhero` WHERE `full_name` LIKE 'John%'
SELECT hero_id FROM hero_attribute ORDER BY attribute_value LIMIT 1
SELECT `full_name` FROM `superhero` WHERE `superhero_name` = 'Alien'
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`weight_kg` < 100 AND `colour`.`colour` = 'Brown'
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'
SELECT `superhero`.`weight_kg`, `race`.`race` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `superhero`.`id` = 40
SELECT AVG(`superhero`.`height_cm`) FROM `superhero` INNER JOIN `alignment` ON `superhero`.`alignment_id` = `alignment`.`id` WHERE `alignment`.`alignment` = 'neutral'
SELECT `hero_power`.`hero_id` FROM `hero_power` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'Intelligence'
SELECT `colour`.`colour` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`superhero_name` = 'Blackwulf'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)
SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 ORDER BY T2.q1 DESC LIMIT 5
SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 ORDER BY T2.q2 LIMIT 1
SELECT DISTINCT `races`.`year` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`location` = 'Shanghai'
SELECT races.url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'
SELECT DISTINCT `races`.`name` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`country` = 'Germany'
SELECT DISTINCT T1.position FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = 'Renault'
SELECT COUNT(*) FROM `races` AS r INNER JOIN `circuits` AS c ON r.circuitId = c.circuitId WHERE r.year = '2010' AND c.country NOT IN ('Asia', 'Europe')
SELECT `races`.`name` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`country` = 'Spain'
SELECT `circuits`.`lat`, `circuits`.`lng` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`name` = 'Australian Grand Prix'
SELECT `url` FROM `races` WHERE `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `name` = 'Sepang International Circuit')
SELECT `time` FROM `races` WHERE `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `name` = 'Sepang International Circuit')
SELECT `circuits`.`lat`, `circuits`.`lng` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`name` = 'Abu Dhabi Grand Prix'
SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 24 AND T1.points = 1
SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna')
SELECT `drivers`.`nationality` FROM `qualifying` INNER JOIN `drivers` ON `qualifying`.`driverId` = `drivers`.`driverId` WHERE `qualifying`.`raceId` = 355 AND `qualifying`.`q2` = '0:01:40'
SELECT `number` FROM `qualifying` WHERE `raceId` = 903 AND `q3` LIKE '1:54%'
SELECT COUNT(DISTINCT `results`.`driverId`) FROM `results` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `races`.`name` = 'Bahrain Grand Prix' AND `races`.`year` = 2007 AND `results`.`time` IS NULL
SELECT `url` FROM `seasons` WHERE `year` = (SELECT `year` FROM `races` WHERE `raceId` = 901)
SELECT COUNT(DISTINCT `driverId`) FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `date` = '2015-11-29') AND `positionText` != '\N'
SELECT `forename`, `surname`, `dob` FROM `drivers` WHERE `driverId` IN (SELECT `driverId` FROM `results` WHERE `raceId` = 592 AND `time` IS NOT NULL) ORDER BY `dob` ASC LIMIT 1
SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 933 ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT `lat`, `lng` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` WHERE `races`.`name` = 'Malaysian Grand Prix'
SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1
SELECT q1 FROM qualifying WHERE raceId = 345 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di_grassi')
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.q2 = '0:01:15'
SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '1:33%'
SELECT T1.time FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'mclaren' AND T1.raceId = 743
SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'San Marino Grand Prix' AND T2.year = 2006 AND T1.position = 2
SELECT `seasons`.`url` FROM `seasons` INNER JOIN `races` ON `seasons`.`year` = `races`.`year` WHERE `races`.`raceId` = 901
SELECT COUNT(*) FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `date` = '2015-11-29') AND `statusId` = (SELECT `statusId` FROM `status` WHERE `status` = 'Finished')
SELECT `forename`, `surname` FROM `drivers` WHERE `driverId` IN (SELECT `driverId` FROM `results` WHERE `raceId` = 872 AND `time` IS NOT NULL) ORDER BY `dob` DESC LIMIT 1
SELECT d.forename, d.surname FROM drivers AS d INNER JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE lt.raceId = 348 ORDER BY lt.time LIMIT 1
SELECT `drivers`.`nationality` FROM `results` INNER JOIN `drivers` ON `results`.`driverId` = `drivers`.`driverId` ORDER BY `results`.`fastestLapSpeed` DESC LIMIT 1
SELECT CAST((`T1`.`fastestLapSpeed` - `T2`.`fastestLapSpeed`) * 100 / `T1`.`fastestLapSpeed` AS REAL) AS percentage FROM `results` AS `T1` INNER JOIN `results` AS `T2` ON `T1`.`driverId` = `T2`.`driverId` WHERE `T1`.`raceId` = 853 AND `T2`.`raceId` = 854 AND `T1`.`driverId` = (SELECT `driverId` FROM `drivers` WHERE `forename` = 'Paul' AND `surname` = 'di Resta')
SELECT CAST(COUNT(`driverId` WHERE `time` IS NOT NULL) AS REAL) * 100 / COUNT(`driverId`) AS percentage FROM `lapTimes` WHERE `raceId` IN (SELECT `raceId` FROM `races` WHERE `date` = '1983-07-16')
SELECT MIN(`year`) FROM `races` WHERE `name` = 'Singapore Grand Prix'
SELECT `name` FROM `races` WHERE `year` = 2005 ORDER BY `name` DESC
SELECT `name` FROM `races` WHERE `year` = (SELECT MIN(`year`) FROM `races`) AND strftime('%m', `date`) = (SELECT strftime('%m', MIN(`date`)) FROM `races` WHERE `year` = (SELECT MIN(`year`) FROM `races`))
SELECT `name`, `date` FROM `races` WHERE `year` = 1999 AND `round` = (SELECT MAX(`round`) FROM `races` WHERE `year` = 1999)
SELECT `year` FROM `races` GROUP BY `year` ORDER BY MAX(`round`) DESC LIMIT 1
SELECT `races`.`name` FROM `races` WHERE `races`.`year` = '2017' AND `races`.`name` NOT IN (SELECT `races`.`name` FROM `races` WHERE `races`.`year` = '2000')
SELECT T1.name AS Circuit_Name, T1.location AS Location, T1.country AS Country FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1
SELECT MAX(`year`) FROM `races` WHERE `name` = 'British Grand Prix' AND `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `name` = 'Brands Hatch')
SELECT COUNT(DISTINCT `races`.`year`) FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`name` = 'Silverstone Circuit' AND `races`.`name` LIKE '%British Grand Prix%'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2010 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.position
SELECT `drivers`.`forename`, `drivers`.`surname`, `driverStandings`.`points` FROM `driverStandings` INNER JOIN `drivers` ON `driverStandings`.`driverId` = `drivers`.`driverId` ORDER BY `driverStandings`.`points` DESC LIMIT 1
SELECT T1.forename, T1.surname, T2.points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2017 AND T3.name = 'Chinese Grand Prix' ORDER BY T2.points DESC LIMIT 3
SELECT drivers.forename, drivers.surname, races.name, MIN(lapTimes.milliseconds) AS best_lap_time FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId
SELECT AVG(`lapTimes`.`milliseconds`) FROM `lapTimes` INNER JOIN `drivers` ON `lapTimes`.`driverId` = `drivers`.`driverId` INNER JOIN `races` ON `lapTimes`.`raceId` = `races`.`raceId` WHERE `drivers`.`forename` = 'Lewis' AND `drivers`.`surname` = 'Hamilton' AND `races`.`name` = 'Malaysian Grand Prix' AND `races`.`year` = 2009
SELECT CAST(SUM(CASE WHEN `position` > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`position`) FROM `results` INNER JOIN `drivers` ON `results`.`driverId` = `drivers`.`driverId` WHERE `drivers`.`surname` = 'Hamilton' AND `results`.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` >= 2010)
SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) AS max_points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1
SELECT forename, surname, (strftime('%Y', 'now') - strftime('%Y', dob)) - (strftime('%m-%d', 'now') < strftime('%m-%d', dob)) AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT `circuits`.`name` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` WHERE `races`.`year` BETWEEN 1990 AND 2000 GROUP BY `circuits`.`circuitId` HAVING COUNT(`races`.`raceId`) = 4
SELECT `circuits`.`name`, `circuits`.`location`, `races`.`name` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` WHERE `circuits`.`country` = 'USA' AND `races`.`year` = 2006
SELECT T1.name AS race_name, T2.name AS circuit_name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2005 AND MONTH(T1.date) = 9
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20
SELECT COUNT(*) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T3.driverRef = 'michael_schumacher' AND T4.circuitRef = 'sepang' AND T2.position = 1
SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1
SELECT AVG(`T2`.`points`) FROM `drivers` AS `T1` INNER JOIN `results` AS `T2` ON `T1`.`driverId` = `T2`.`driverId` WHERE `T1`.`driverRef` = 'eddie_irvine' AND `T2`.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` = 2000)
SELECT T1.name, T2.points FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year, T1.round LIMIT 1
SELECT `races`.`name`, `circuits`.`country` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`year` = 2017 ORDER BY `races`.`date`
SELECT `races`.`name`, `races`.`year`, `circuits`.`location` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` ORDER BY (SELECT MAX(`laps`) FROM `results` WHERE `results`.`raceId` = `races`.`raceId`) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN `circuits`.`country` = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`name` = 'European Grand Prix'
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Silverstone Circuit'
SELECT `name`, `lat` FROM `circuits` WHERE `name` IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY `lat` DESC LIMIT 1
SELECT `circuitRef` FROM `circuits` WHERE `name` = 'Marina Bay Street Circuit'
SELECT `circuits`.`country` FROM `circuits` ORDER BY `circuits`.`alt` DESC LIMIT 1
SELECT COUNT(`driverId`) FROM `drivers` WHERE `code` IS NULL
SELECT `circuits`.`country` FROM `drivers` INNER JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `drivers`.`dob` IS NOT NULL ORDER BY `drivers`.`dob` LIMIT 1
SELECT `surname` FROM `drivers` WHERE `nationality` = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
SELECT `driverRef` FROM `drivers` WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton'
SELECT `circuits`.`name` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`year` = 2009 AND `races`.`name` = 'Spanish Grand Prix'
SELECT DISTINCT `year` FROM `races` WHERE `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `name` = 'Silverstone Circuit')
SELECT `url` FROM `races` WHERE `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `circuitRef` = 'silverstone')
SELECT `time` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`name` = 'Abu Dhabi Circuit' AND `races`.`year` = 2010
SELECT COUNT(*) FROM races AS r INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE c.country = 'Italy' AND r.year IN (SELECT year FROM seasons WHERE url LIKE '%Formula_1%')
SELECT `date` FROM `races` WHERE `circuitId` = (SELECT `circuitId` FROM `circuits` WHERE `name` = 'Barcelona-Catalunya') AND `name` LIKE '%Formula_1%'
SELECT `circuits`.`url` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` WHERE `races`.`name` = 'Spanish Grand Prix' AND `races`.`year` = 2009
SELECT MIN(`fastestLapTime`) FROM `results` INNER JOIN `drivers` ON `results`.`driverId` = `drivers`.`driverId` WHERE `drivers`.`driverRef` = 'hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT T2.driverRef FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = '2007' AND T1.position = '1'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.driverRef = 'hamilton'
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank ASC LIMIT 1
SELECT MAX(`fastestLapSpeed`) FROM `results` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `races`.`name` = 'Spanish Grand Prix' AND `races`.`year` = 2009
SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.driverRef = 'hamilton'
SELECT T1.positionOrder FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Chinese Grand Prix' AND T3.year = 2008
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 1989 AND T3.name = 'Australian Grand Prix' AND T2.grid = 4
SELECT COUNT(DISTINCT `driverId`) FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2008 AND `name` = 'Australian Grand Prix') AND `time` IS NOT NULL
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.driverRef = 'hamilton' AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'
SELECT `results`.`time` FROM `results` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `races`.`name` = 'Chinese Grand Prix' AND `races`.`year` = 2008 AND `results`.`position` = 2
SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T2.position = 1
SELECT COUNT(DISTINCT `drivers`.`driverId`) FROM `drivers` INNER JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `drivers`.`nationality` = 'British' AND `races`.`year` = 2008 AND `races`.`name` = 'Australian Grand Prix'
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL AND EXISTS (SELECT 1 FROM results AS T3 WHERE T3.driverId = T1.driverId AND T3.raceId IN (SELECT raceId FROM races WHERE name LIKE '%Formula_1%'))
SELECT SUM(`points`) FROM `results` JOIN `drivers` ON `results`.`driverId` = `drivers`.`driverId` WHERE `drivers`.`driverRef` = 'hamilton' AND `results`.`raceId` IN (SELECT `raceId` FROM `races` WHERE `name` LIKE '%Formula 1%')
SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(fastestLapTime, 4, 6) AS REAL)) AS avg_fastest_lap_time_seconds FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'hamilton' AND T1.fastestLapTime IS NOT NULL
SELECT CAST(COUNT(DISTINCT T1.raceId) AS REAL) / COUNT(DISTINCT T1.raceId) * 100 FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.time IS NOT NULL
SELECT CAST((((strftime('%s', `results`.`time`) - strftime('%s', (SELECT `time` FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2008 AND `name` = 'Australian Grand Prix') ORDER BY `time` DESC LIMIT 1))) / strftime('%s', (SELECT `time` FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2008 AND `name` = 'Australian Grand Prix') ORDER BY `time` DESC LIMIT 1))) * 100) AS REAL) AS percentage_faster FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2008 AND `name` = 'Australian Grand Prix') AND `time` IS NOT NULL ORDER BY `time` LIMIT 1
SELECT COUNT(`circuitId`) FROM `circuits` WHERE `location` = 'Adelaide' AND `country` = 'Australia'
SELECT `lat`, `lng` FROM `circuits` WHERE `country` = 'USA'
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'
SELECT MAX(`points`) FROM `constructorStandings` AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T2.`nationality` = 'British'
SELECT `constructorId` FROM `constructorStandings` ORDER BY `points` DESC LIMIT 1
SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0
SELECT COUNT(DISTINCT `constructorId`) FROM `constructorResults` WHERE `points` = 0 AND `constructorId` IN (SELECT `constructorId` FROM `constructors` WHERE `nationality` = 'Japanese') AND `raceId` IN (SELECT `raceId` FROM `constructorResults` WHERE `points` = 0 GROUP BY `raceId` HAVING COUNT(`raceId`) = 2)
SELECT DISTINCT `constructors`.`name` FROM `constructors` INNER JOIN `constructorStandings` ON `constructors`.`constructorId` = `constructorStandings`.`constructorId` WHERE `constructorStandings`.`position` = 1
SELECT COUNT(*) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50
SELECT CAST(SUM(CASE WHEN `results`.`time` IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM `results` INNER JOIN `drivers` ON `results`.`driverId` = `drivers`.`driverId` WHERE `drivers`.`nationality` = 'Japanese' AND `results`.`raceId` IN (SELECT `raceId` FROM `races` WHERE `year` BETWEEN 2007 AND 2009)
SELECT AVG(CAST(SUBSTR(`time`, 1, 2) * 3600 + SUBSTR(`time`, 4, 2) * 60 + SUBSTR(`time`, 7, 2) + SUBSTR(`time`, 10) / 1000.0 AS REAL)) AS average_time_seconds FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.year < 1975 AND T1.time IS NOT NULL
SELECT forename, surname FROM drivers WHERE year(dob) > 1975 AND driverId IN (SELECT driverId FROM driverStandings WHERE position = 2)
SELECT COUNT(`drivers`.`driverId`) FROM `drivers` LEFT JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` WHERE `drivers`.`nationality` = 'Italian' AND `results`.`time` IS NULL
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.milliseconds ASC LIMIT 1
SELECT T1.lap FROM lapTimes AS T1 INNER JOIN (SELECT T2.driverId FROM driverStandings AS T2 INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 AND T2.position = 1) AS T4 ON T1.driverId = T4.driverId INNER JOIN races AS T5 ON T1.raceId = T5.raceId WHERE T5.year = 2009 ORDER BY T1.milliseconds ASC LIMIT 1
SELECT AVG(`fastestLapSpeed`) FROM `results` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `races`.`name` = 'Spanish Grand Prix' AND `races`.`year` = 2009
SELECT T1.name, T1.year FROM `races` AS T1 INNER JOIN `results` AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1
SELECT CAST(COUNT(CASE WHEN drivers.dob < '1985-01-01' AND lapTimes.laps > 50 THEN 1 END) AS REAL) * 100 / COUNT(DISTINCT drivers.driverId) FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId INNER JOIN races ON lapTimes.raceId = races.raceId WHERE races.year BETWEEN 2000 AND 2005
SELECT COUNT(*) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds < 120000
SELECT `code` FROM `drivers` WHERE `nationality` = 'American'
SELECT `raceId` FROM `races` WHERE `year` = '2009'
SELECT COUNT(DISTINCT `driverId`) FROM `results` WHERE `raceId` = 18
SELECT T1.code, COUNT(*) OVER () AS total_netherlandic FROM drivers AS T1 WHERE T1.nationality IN ('Dutch', 'Netherlands') ORDER BY strftime('%Y', 'now') - strftime('%Y', T1.dob) ASC LIMIT 3
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND strftime('%Y', dob) = '1980'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1980' AND '1990' ORDER BY T2.time ASC LIMIT 3
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1
SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.dob LIKE '1971-%' ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT `drivers`.`forename`, `drivers`.`surname`, MAX(`lapTimes`.`time`) AS latest_lap_time FROM `drivers` INNER JOIN `lapTimes` ON `drivers`.`driverId` = `lapTimes`.`driverId` WHERE `drivers`.`nationality` = 'Spanish' AND `drivers`.`dob` < '1982-01-01' GROUP BY `drivers`.`driverId` ORDER BY latest_lap_time DESC LIMIT 10
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time DESC LIMIT 1
SELECT `driverId` FROM `lapTimes` WHERE `lap` = 1 ORDER BY `time` ASC LIMIT 5
SELECT COUNT(*) FROM results WHERE raceId > 50 AND raceId < 100 AND statusId = 2 AND time IS NOT NULL
SELECT COUNT(`races`.`raceId`), `circuits`.`location`, `circuits`.`lat`, `circuits`.`lng` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`country` = 'Austria' GROUP BY `circuits`.`location`, `circuits`.`lat`, `circuits`.`lng`
SELECT T1.round FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL GROUP BY T1.round ORDER BY COUNT(T2.resultId) DESC LIMIT 1
SELECT `drivers`.`driverRef`, `drivers`.`nationality`, `drivers`.`dob` FROM `qualifying` INNER JOIN `drivers` ON `qualifying`.`driverId` = `drivers`.`driverId` WHERE `qualifying`.`raceId` = 23 AND `qualifying`.`q2` IS NOT NULL
SELECT T1.year, T1.name, T1.date, T1.time FROM races AS T1 INNER JOIN qualifying AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.dob = (SELECT MAX(dob) FROM drivers) ORDER BY T1.date LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T2.statusId = T3.statusId WHERE T1.nationality = 'American' AND T3.status = 'Puncture'
SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1
SELECT `url` FROM `constructors` WHERE `constructorId` = (SELECT `constructorId` FROM `constructorStandings` GROUP BY `constructorId` ORDER BY SUM(`wins`) DESC LIMIT 1)
SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1
SELECT `races`.`name`, `lapTimes`.`time`, `lapTimes`.`milliseconds` FROM `lapTimes` INNER JOIN `races` ON `lapTimes`.`raceId` = `races`.`raceId` WHERE `lapTimes`.`lap` = 1 ORDER BY `lapTimes`.`milliseconds` ASC LIMIT 1
SELECT AVG(`fastestLapTime`) FROM `results` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2006 AND `name` = 'United States Grand Prix') AND `rank` < 11
SELECT T1.forename, T1.surname, CAST(SUM(T2.duration) AS REAL) / COUNT(T2.duration) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND 1980 < STRFTIME('%Y', T1.dob) AND STRFTIME('%Y', T1.dob) < 1985 GROUP BY T1.driverId ORDER BY avg_duration ASC LIMIT 3
SELECT T2.forename, T2.surname, T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2008 AND T1.position = 1
SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.position ASC LIMIT 1
SELECT `forename`, `surname`, `dob` FROM `drivers` WHERE `nationality` = 'Austrian' AND `dob` BETWEEN '1981-01-01' AND '1991-12-31'
SELECT `forename` || ' ' || `surname` AS full_name, `url`, `dob` FROM `drivers` WHERE `nationality` = 'German' AND `dob` BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY `dob` DESC
SELECT `location`, `country`, `lat`, `lng` FROM `circuits` WHERE `name` = 'Hungaroring'
SELECT T1.points, T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T1.points DESC LIMIT 1
SELECT AVG(`points`) FROM `results` AS `r` INNER JOIN `races` AS `ra` ON `r`.`raceId` = `ra`.`raceId` INNER JOIN `drivers` AS `d` ON `r`.`driverId` = `d`.`driverId` WHERE `d`.`driverRef` = 'hamilton' AND `ra`.`name` = 'Turkish Grand Prix'
SELECT AVG(race_count) FROM (SELECT COUNT(`raceId`) AS race_count FROM `races` WHERE `date` BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY `year`) AS subquery
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT wins FROM driverStandings WHERE points = 91
SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT `circuits`.`location`, `circuits`.`country` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `races`.`date` = (SELECT MAX(`date`) FROM `races`)
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T3.year = 2008 AND T4.name = 'Marina Bay Street Circuit' AND T2.position = 1 AND T3.round = 3 ORDER BY T2.q3 LIMIT 1
SELECT `forename` || ' ' || `surname` AS full_name, `nationality`, `name` AS race_name FROM `drivers` INNER JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` ORDER BY `dob` DESC LIMIT 1
SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.forename || ' ' || T1.surname AS full_name, T2.wins FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) ORDER BY T2.wins DESC LIMIT 1
SELECT MAX(`duration`) FROM `pitStops`
SELECT MIN(time) FROM `lapTimes`
SELECT MAX(`duration`) FROM `pitStops` WHERE `driverId` = (SELECT `driverId` FROM `drivers` WHERE `driverRef` = 'hamilton')
SELECT T1.lap FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.driverRef = 'hamilton' AND T2.year = 2011 AND T2.name = 'Australian Grand Prix'
SELECT `driverId`, SUM(`duration`) AS total_duration FROM `pitStops` WHERE `raceId` = (SELECT `raceId` FROM `races` WHERE `year` = 2011 AND `name` = 'Australian Grand Prix') GROUP BY `driverId`
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.driverRef = 'hamilton' AND T3.name LIKE 'Formula 1 %'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T2.time ASC LIMIT 20
SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.driverRef = 'hamilton' ORDER BY T1.time ASC LIMIT 1
SELECT MIN(`time`) FROM `lapTimes` INNER JOIN `races` ON `lapTimes`.`raceId` = `races`.`raceId` WHERE `races`.`name` = 'Austrian Grand Prix'
SELECT `circuits`.`name`, MIN(`lapTimes`.`time`) AS `lap_record` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` INNER JOIN `lapTimes` ON `races`.`raceId` = `lapTimes`.`raceId` WHERE `circuits`.`country` = 'Italy' GROUP BY `circuits`.`name`
SELECT `races`.`name` FROM `lapTimes` INNER JOIN `races` ON `lapTimes`.`raceId` = `races`.`raceId` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`name` = 'Austrian Grand Prix Circuit' ORDER BY `lapTimes`.`time` ASC LIMIT 1
SELECT pitStops.duration FROM pitStops INNER JOIN (SELECT lapTimes.raceId, lapTimes.driverId FROM lapTimes INNER JOIN races ON lapTimes.raceId = races.raceId WHERE races.name = 'Austrian Grand Prix' ORDER BY lapTimes.time ASC LIMIT 1) AS fastestLap ON pitStops.raceId = fastestLap.raceId AND pitStops.driverId = fastestLap.driverId
SELECT `circuits`.`lat`, `circuits`.`lng` FROM `circuits` INNER JOIN `races` ON `circuits`.`circuitId` = `races`.`circuitId` INNER JOIN `lapTimes` ON `races`.`raceId` = `lapTimes`.`raceId` WHERE `lapTimes`.`time` = '1:29.488'
SELECT AVG(`milliseconds`) FROM `pitStops` INNER JOIN `drivers` ON `pitStops`.`driverId` = `drivers`.`driverId` WHERE `drivers`.`driverRef` = 'hamilton'
SELECT AVG(`milliseconds`) FROM `lapTimes` AS T1 INNER JOIN `races` AS T2 ON T1.`raceId` = T2.`raceId` INNER JOIN `circuits` AS T3 ON T2.`circuitId` = T3.`circuitId` WHERE T3.`country` = 'Italy'
SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `overall_rating` DESC LIMIT 1
SELECT `player_name`, `height` FROM `Player` ORDER BY `height` DESC LIMIT 1
SELECT `preferred_foot` FROM `Player_Attributes` ORDER BY `potential` ASC LIMIT 1
SELECT COUNT(`Player_Attributes`.`id`) FROM `Player_Attributes` WHERE `overall_rating` >= 60 AND `overall_rating` < 65 AND `defensive_work_rate` = 'low'
SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `crossing` DESC LIMIT 5
SELECT T2.`name` FROM `Match` AS T1 INNER JOIN `League` AS T2 ON T1.`league_id` = T2.`id` WHERE T1.`season` = '2015/2016' GROUP BY T1.`league_id` ORDER BY SUM(T1.`home_team_goal` + T1.`away_team_goal`) DESC LIMIT 1
SELECT `home_team_api_id`, COUNT(*) AS `losses` FROM `Match` WHERE `season` = '2015/2016' AND `home_team_goal` < `away_team_goal` GROUP BY `home_team_api_id` ORDER BY `losses` ASC LIMIT 1
SELECT `player_name` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` GROUP BY `Player`.`player_api_id` ORDER BY MAX(`penalties`) DESC LIMIT 10
SELECT T.team_long_name FROM Team AS T INNER JOIN Match AS M ON T.team_api_id = M.away_team_api_id INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY T.team_long_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT `team_long_name`, `buildUpPlaySpeed` FROM `Team_Attributes` INNER JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` ORDER BY `buildUpPlaySpeed` DESC LIMIT 4
SELECT T2.name FROM `Match` AS T1 INNER JOIN `League` AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal GROUP BY T2.name ORDER BY COUNT(*) DESC LIMIT 1
SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birthday) AS age FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date BETWEEN '2013-01-01' AND '2015-12-31'
SELECT L.`name`, COUNT(M.`id`) AS match_count FROM `Match` AS M INNER JOIN `League` AS L ON M.`league_id` = L.`id` GROUP BY M.`league_id` ORDER BY match_count DESC LIMIT 1
SELECT AVG(`height`) FROM `Player` WHERE `birthday` >= '1990-01-01 00:00:00' AND `birthday` < '1996-01-01 00:00:00'
SELECT `player_api_id` FROM `Player_Attributes` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes` WHERE `overall_rating` > (SELECT AVG(`overall_rating`) FROM `Player_Attributes` WHERE substr(`date`,1,4) = '2010') AND substr(`date`,1,4) = '2010') AND substr(`date`,1,4) = '2010'
SELECT `team_fifa_api_id` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` > 50 AND `buildUpPlaySpeed` < 60
SELECT `team_long_name` FROM `Team_Attributes` WHERE `buildUpPlayPassing` > (SELECT SUM(`buildUpPlayPassing`) / COUNT(`team_long_name`) FROM `Team_Attributes` WHERE `buildUpPlayPassing` IS NOT NULL) AND strftime('%Y', `date`) = '2012'
SELECT CAST(SUM(CASE WHEN `preferred_foot` = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`player_fifa_api_id`) FROM `Player_Attributes` WHERE `player_fifa_api_id` IN (SELECT `player_fifa_api_id` FROM `Player` WHERE STRFTIME('%Y', `birthday`) BETWEEN '1987' AND '1992')
SELECT L.`name` FROM `League` AS L INNER JOIN `Match` AS M ON L.`id` = M.`league_id` GROUP BY L.`name` ORDER BY SUM(M.`home_team_goal` + M.`away_team_goal`) ASC LIMIT 5
SELECT CAST(SUM(`long_shots`) AS REAL) / COUNT(`player_fifa_api_id`) FROM `Player_Attributes` WHERE `player_fifa_api_id` = (SELECT `player_fifa_api_id` FROM `Player` WHERE `player_name` = 'Ahmed Samir Farag')
SELECT `Player`.`player_name` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`height` > 180 GROUP BY `Player`.`player_name` ORDER BY SUM(`Player_Attributes`.`heading_accuracy`) / COUNT(`Player_Attributes`.`player_fifa_api_id`) DESC LIMIT 10
SELECT `team_long_name`, `chanceCreationPassing` FROM `Team_Attributes` INNER JOIN `Team` ON `Team_Attributes`.`team_api_id` = `Team`.`team_api_id` WHERE `buildUpPlayDribblingClass` = 'Normal' AND `date` >= '2014-01-01 00:00:00' AND `date` <= '2014-01-31 00:00:00' AND `chanceCreationPassing` < (SELECT AVG(`chanceCreationPassing`) FROM `Team_Attributes` WHERE `date` >= '2014-01-01 00:00:00' AND `date` <= '2014-01-31 00:00:00') ORDER BY `chanceCreationPassing` DESC
SELECT L.`name` FROM `League` AS L INNER JOIN `Match` AS M ON L.`id` = M.`league_id` WHERE M.`season` = '2009/2010' GROUP BY L.`name` HAVING AVG(M.`home_team_goal`) > AVG(M.`away_team_goal`)
SELECT `team_short_name` FROM `Team` WHERE `team_long_name` = 'Queens Park Rangers'
SELECT `player_name` FROM `Player` WHERE `birthday` LIKE '1970-10%'
SELECT `attacking_work_rate` FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Franco Zennaro' LIMIT 1
SELECT buildUpPlayPositioningClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'ADO Den Haag')
SELECT `heading_accuracy` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Francois Affolter') AND `date` = '2014-09-18 00:00:00'
SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Gabriel Tamas') AND strftime('%Y', `date`) = '2011' ORDER BY `date` DESC LIMIT 1
SELECT COUNT(`Match`.`id`) FROM `Match` INNER JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `League`.`name` = 'Scotland Premier League' AND `Match`.`season` = '2015/2016'
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday DESC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Player_Attributes` WHERE `potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`))
SELECT COUNT(`Player`.`id`) FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`weight` < 130 AND `Player_Attributes`.`preferred_foot` = 'left'
SELECT `team_short_name` FROM `Team_Attributes` WHERE `chanceCreationPassingClass` = 'Risky'
SELECT `defensive_work_rate` FROM `Player_Attributes` AS `PA` INNER JOIN `Player` AS `P` ON `PA`.`player_api_id` = `P`.`player_api_id` WHERE `P`.`player_name` = 'David Wilson' LIMIT 1
SELECT `Player`.`birthday` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` ORDER BY `Player_Attributes`.`overall_rating` DESC LIMIT 1
SELECT `name` FROM `League` WHERE `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Netherlands')
SELECT CAST(SUM(`home_team_goal`) AS REAL) / COUNT(DISTINCT `Match`.`id`) FROM `Match` INNER JOIN `Country` ON `Match`.`country_id` = `Country`.`id` WHERE `Country`.`name` = 'Poland' AND `Match`.`season` = '2010/2011'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = (SELECT MAX(height) FROM Player) OR T1.height = (SELECT MIN(height) FROM Player) GROUP BY T1.player_name ORDER BY AVG(T2.finishing) DESC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `height` > 180
SELECT COUNT(`id`) FROM `Player` WHERE strftime('%Y', `birthday`) > '1990'
SELECT COUNT(`Player`.`id`) FROM `Player` WHERE `Player`.`player_name` LIKE 'Adam %' AND `Player`.`weight` > 170
SELECT `Player`.`player_name` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`overall_rating` > 80 AND strftime('%Y', `Player_Attributes`.`date`) BETWEEN '2008' AND '2010'
SELECT `potential` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Doran') ORDER BY `date` DESC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `preferred_foot` = 'left'
SELECT `team_long_name` FROM `Team` INNER JOIN `Team_Attributes` ON `Team`.`team_api_id` = `Team_Attributes`.`team_api_id` WHERE `buildUpPlaySpeedClass` = 'Fast'
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_short_name` = 'CLB' LIMIT 1)
SELECT `team_short_name` FROM `Team` INNER JOIN `Team_Attributes` ON `Team`.`team_api_id` = `Team_Attributes`.`team_api_id` WHERE `buildUpPlayPassing` > 70
SELECT SUM(`t2`.`overall_rating`) / COUNT(`t2`.`id`) FROM `Player` AS `t1` INNER JOIN `Player_Attributes` AS `t2` ON `t1`.`player_api_id` = `t2`.`player_api_id` WHERE `t1`.`height` > 170 AND strftime('%Y', `t2`.`date`) >= '2010' AND strftime('%Y', `t2`.`date`) <= '2015'
SELECT `player_name` FROM `Player` ORDER BY `height` ASC LIMIT 1
SELECT T2.`name` FROM `League` AS T1 INNER JOIN `Country` AS T2 ON T1.`country_id` = T2.`id` WHERE T1.`name` = 'Italy Serie A'
SELECT `team_short_name` FROM `Team_Attributes` WHERE `buildUpPlaySpeed` = 31 AND `buildUpPlayDribbling` = 53 AND `buildUpPlayPassing` = 32
SELECT AVG(`T1`.`overall_rating`) FROM `Player_Attributes` AS `T1` INNER JOIN `Player` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T2`.`player_name` = 'Aaron Doran'
SELECT COUNT(`id`) FROM `Match` WHERE `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Germany 1. Bundesliga') AND strftime('%Y-%m', `date`) BETWEEN '2008-08' AND '2008-10'
SELECT `team_short_name` FROM `Team` WHERE `team_api_id` IN (SELECT `home_team_api_id` FROM `Match` WHERE `home_team_goal` = 10)
SELECT `Player`.`player_name` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`potential` = 61 AND `Player_Attributes`.`balance` = (SELECT MAX(`balance`) FROM `Player_Attributes` WHERE `potential` = 61)
SELECT (SUM(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T1.id ELSE NULL END)) - (SUM(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control ELSE 0 END) / COUNT(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T1.id ELSE NULL END)) AS difference FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
SELECT `team_long_name` FROM `Team` WHERE `team_short_name` = 'GEN'
SELECT `player_name` FROM `Player` WHERE `player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY `birthday` ASC LIMIT 1
SELECT `player_name` FROM `Player` ORDER BY `height` DESC LIMIT 1
SELECT COUNT(`Player_Attributes`.`id`) FROM `Player_Attributes` WHERE `Player_Attributes`.`preferred_foot` = 'left' AND `Player_Attributes`.`attacking_work_rate` = 'low'
SELECT `Country`.`name` FROM `Country` INNER JOIN `League` ON `Country`.`id` = `League`.`country_id` WHERE `League`.`name` = 'Belgium Jupiler League'
SELECT `name` FROM `League` INNER JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `Country`.`name` = 'Germany'
SELECT `player_name` FROM `Player` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `overall_rating` DESC LIMIT 1)
SELECT COUNT(DISTINCT `Player`.`id`) FROM `Player` JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE strftime('%Y', `Player`.`birthday`) < '1986' AND `Player_Attributes`.`defensive_work_rate` = 'high'
SELECT P.player_name FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY PA.crossing DESC LIMIT 1
SELECT `heading_accuracy` FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Ariel Borysiuk' ORDER BY `date` DESC LIMIT 1
SELECT COUNT(`Player`.`id`) FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`height` > 180 AND `Player_Attributes`.`volleys` > 70
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70
SELECT COUNT(*) FROM `Match` WHERE `season` = '2008/2009' AND `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Belgium')
SELECT `long_passing` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` ORDER BY `birthday` ASC LIMIT 1)
SELECT COUNT(`Match`.`id`) FROM `Match` INNER JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `League`.`name` = 'Belgium Jupiler League' AND SUBSTR(`Match`.`date`, 1, 7) = '2009-04'
SELECT T2.name FROM `Match` AS T1 INNER JOIN `League` AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT CAST(SUM(`overall_rating`) AS REAL) / COUNT(`id`) FROM `Player_Attributes` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Player` WHERE strftime('%Y', `birthday`) < '1986')
SELECT (SELECT overall_rating FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Ariel Borysiuk') ORDER BY `date` DESC LIMIT 1) - (SELECT overall_rating FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Paulin Puel') ORDER BY `date` DESC LIMIT 1) * 100.0 / (SELECT overall_rating FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Paulin Puel') ORDER BY `date` DESC LIMIT 1) AS percentage_difference
SELECT AVG(`buildUpPlaySpeed`) FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Heart of Midlothian')
SELECT AVG(`T1`.`overall_rating`) FROM `Player_Attributes` AS `T1` INNER JOIN `Player` AS `T2` ON `T1`.`player_api_id` = `T2`.`player_api_id` WHERE `T2`.`player_name` = 'Pietro Marino'
SELECT SUM(`crossing`) FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Aaron Lennox'
SELECT MAX(`chanceCreationPassing`), `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Ajax')
SELECT `preferred_foot` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Abdou Diallo' LIMIT 1)
SELECT MAX(`overall_rating`) FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Dorlan Pabon'
SELECT AVG(`away_team_goal`) FROM `Match` AS `M` INNER JOIN `Team` AS `T` ON `M`.`away_team_api_id` = `T`.`team_api_id` WHERE `T`.`team_long_name` = 'Parma' AND `M`.`country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Italy')
SELECT `Player`.`player_name` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` WHERE `Player_Attributes`.`overall_rating` = 77 AND `Player_Attributes`.`date` LIKE '2016-06-23%' ORDER BY `Player`.`birthday` ASC LIMIT 1
SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Mooy') AND `date` LIKE '2016-02-04%'
SELECT `potential` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Francesco Parravicini') AND `date` = '2010-08-30 00:00:00'
SELECT `attacking_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Francesco Migliore') AND `date` LIKE '2015-05-01%'
SELECT `defensive_work_rate` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Kevin Berigaud') AND `date` = '2013-02-22 00:00:00'
SELECT T1.`date` FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Kevin Constant' ORDER BY T1.`crossing` DESC, T1.`date` ASC LIMIT 1
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Willem II') AND `date` = '2012-02-22'
SELECT `buildUpPlayDribblingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_short_name` = 'LEI') AND `date` = '2015-09-10 00:00:00'
SELECT `buildUpPlayPassingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'FC Lorient') AND `date` LIKE '2010-02-22%'
SELECT `chanceCreationPassingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'PEC Zwolle') AND `date` = '2013-09-20 00:00:00'
SELECT `chanceCreationCrossingClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Hull City') AND `date` = '2010-02-22 00:00:00'
SELECT `defenceAggressionClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'Hannover 96') AND `date` LIKE '2015-09-10%'
SELECT AVG(`overall_rating`) AS avg_rating FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Marko Arnautovic') AND SUBSTR(`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'
SELECT CAST((SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Landon Donovan') AND `date` <= '2013-07-12' ORDER BY `date` DESC LIMIT 1) - (SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Jordan Bowery') AND `date` <= '2013-07-12' ORDER BY `date` DESC LIMIT 1) AS REAL) * 100 / (SELECT `overall_rating` FROM `Player_Attributes` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Landon Donovan') AND `date` <= '2013-07-12' ORDER BY `date` DESC LIMIT 1)
SELECT `player_name` FROM `Player` ORDER BY `height` DESC LIMIT 1
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT `player_name` FROM `Player` WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(`birthday`) > 34
SELECT COUNT(`home_team_goal`) FROM `Match` WHERE `home_player_1` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_2` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_3` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_4` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_5` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_6` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_7` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_8` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_9` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_10` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon') OR `home_player_11` = (SELECT `player_api_id` FROM `Player` WHERE `player_name` = 'Aaron Lennon')
SELECT SUM(T1.away_team_goal) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.away_player_1 = T2.player_api_id OR T1.away_player_2 = T2.player_api_id OR T1.away_player_3 = T2.player_api_id OR T1.away_player_4 = T2.player_api_id OR T1.away_player_5 = T2.player_api_id OR T1.away_player_6 = T2.player_api_id OR T1.away_player_7 = T2.player_api_id OR T1.away_player_8 = T2.player_api_id OR T1.away_player_9 = T2.player_api_id OR T1.away_player_10 = T2.player_api_id OR T1.away_player_11 = T2.player_api_id WHERE T2.player_name IN ('Daan Smith', 'Filipe Ferreira')
SELECT SUM(`home_team_goal`) FROM `Match` WHERE `home_player_1` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_2` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_3` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_4` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_5` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_6` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_7` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_8` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_9` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_10` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31) OR `home_player_11` IN (SELECT `player_api_id` FROM `Player` WHERE STRFTIME('%Y', 'now') - STRFTIME('%Y', `birthday`) < 31)
SELECT `player_name` FROM `Player` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `overall_rating` DESC LIMIT 1)
SELECT `player_name` FROM `Player` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Player_Attributes` WHERE `potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`))
SELECT `player_name` FROM `Player` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Player_Attributes` WHERE `attacking_work_rate` = 'high')
SELECT `player_name` FROM `Player` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Player_Attributes` WHERE `finishing` = 1) ORDER BY `birthday` LIMIT 1
SELECT `player_name` FROM `Player` WHERE `id` IN (SELECT `player_api_id` FROM `Player_Attributes` WHERE `player_api_id` IN (SELECT `player_api_id` FROM `Match` WHERE `country_id` IN (SELECT `id` FROM `Country` WHERE `name` = 'Belgium')))
SELECT `Player`.`player_name`, `Country`.`name` FROM `Player_Attributes` INNER JOIN `Player` ON `Player_Attributes`.`player_api_id` = `Player`.`player_api_id` INNER JOIN `Match` ON `Player`.`player_api_id` = `Match`.`home_player_1` INNER JOIN `Country` ON `Match`.`country_id` = `Country`.`id` WHERE `Player_Attributes`.`vision` > 89
SELECT C.`name` FROM `Country` AS C INNER JOIN `League` AS L ON C.`id` = L.`country_id` INNER JOIN `Match` AS M ON L.`id` = M.`league_id` INNER JOIN `Player` AS P ON M.`home_player_1` = P.`player_api_id` GROUP BY C.`name` ORDER BY AVG(P.`weight`) DESC LIMIT 1
SELECT `team_long_name` FROM `Team_Attributes` WHERE `buildUpPlaySpeedClass` = 'Slow'
SELECT `team_short_name` FROM `Team` AS T1 INNER JOIN `Team_Attributes` AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T2.`chanceCreationPassingClass` = 'Safe'
SELECT AVG(`Player`.`height`) FROM `Player` INNER JOIN `Country` ON `Player`.`id` = `Country`.`id` WHERE `Country`.`name` = 'Italy'
SELECT `player_name` FROM `Player` WHERE `height` > 180 ORDER BY `player_name` ASC LIMIT 3
SELECT COUNT(`id`) FROM `Player` WHERE `player_name` LIKE 'Aaron%' AND `birthday` > '1990-01-01'
SELECT (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 6) - (SELECT `jumping` FROM `Player_Attributes` WHERE `id` = 23) AS `jumping_difference`
SELECT `player_api_id` FROM `Player_Attributes` WHERE `preferred_foot` = 'right' ORDER BY `potential` ASC LIMIT 5
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'
SELECT CAST(SUM(CASE WHEN `Player_Attributes`.`strength` > 80 AND `Player_Attributes`.`stamina` > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`Player_Attributes`.`id`) FROM `Player_Attributes`
SELECT `Country`.`name` FROM `Country` INNER JOIN `League` ON `Country`.`id` = `League`.`country_id` WHERE `League`.`name` = 'Poland Ekstraklasa'
SELECT `home_team_goal`, `away_team_goal` FROM `Match` JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `Match`.`date` LIKE '2008-09-24%' AND `League`.`name` = 'Belgium Jupiler League'
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin')
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` WHERE `team_api_id` = (SELECT `team_api_id` FROM `Team` WHERE `team_long_name` = 'KSV Cercle Brugge') ORDER BY `date` DESC LIMIT 1
SELECT COUNT(`Match`.`id`) FROM `Match` INNER JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `Match`.`season` = '2015/2016' AND `League`.`name` = 'Italian Serie A'
SELECT MAX(`home_team_goal`) FROM `Match` WHERE `league_id` = (SELECT `id` FROM `League` WHERE `name` = 'Netherlands Eredivisie')
SELECT `finishing`, `curve` FROM `Player` ORDER BY `weight` DESC LIMIT 1
SELECT L.`name`, COUNT(M.`id`) AS game_count FROM `Match` M INNER JOIN `League` L ON M.`league_id` = L.`id` WHERE M.`season` = '2015/2016' GROUP BY L.`name` ORDER BY game_count DESC LIMIT 4
SELECT T2.`team_long_name` FROM `Match` AS T1 INNER JOIN `Team` AS T2 ON T1.`away_team_api_id` = T2.`team_api_id` ORDER BY T1.`away_team_goal` DESC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `player_api_id` = (SELECT `player_api_id` FROM `Player_Attributes` ORDER BY `overall_rating` DESC LIMIT 1)
SELECT CAST(COUNT(CASE WHEN `Player`.`height` < 180 AND `Player_Attributes`.`overall_rating` > 70 THEN `Player`.`id` ELSE NULL END) AS REAL) * 100 / COUNT(`Player`.`id`) FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id`
SELECT CAST(SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`ID`) AS in_patient_percentage, CAST(SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`ID`) AS out_patient_percentage, ABS(CAST(SUM(CASE WHEN `Admission` = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`ID`) - CAST(SUM(CASE WHEN `Admission` = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`ID`)) AS deviation_percentage FROM `Patient` WHERE `SEX` = 'M'
SELECT CAST(SUM(CASE WHEN strftime('%Y', `Birthday`) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM `Patient` WHERE `SEX` = 'F'
SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE strftime('%Y', Birthday) BETWEEN '1930' AND '1940'
SELECT CAST(COUNT(CASE WHEN `Patient`.`Admission` = '-' THEN `Patient`.`ID` END) AS REAL) / COUNT(CASE WHEN `Patient`.`Admission` = '+' THEN `Patient`.`ID` END) AS ratio FROM `Patient` WHERE `Patient`.`Diagnosis` = 'SLE'
SELECT `Patient`.`Diagnosis`, `Laboratory`.`Date` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`ID` = '30609'
SELECT `Patient`.`SEX`, `Patient`.`Birthday`, `Examination`.`Examination Date`, `Examination`.`Symptoms` FROM `Patient` INNER JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE `Patient`.`ID` = '163109'
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > '500'
SELECT T1.ID, strftime('%Y', 'now') - strftime('%Y', T2.Birthday) AS age FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RVVT = '+'
SELECT T1.ID, T2.SEX, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 2
SELECT DISTINCT `Patient`.`ID` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE strftime('%Y', `Patient`.`Birthday`) = '1937' AND `Laboratory`.`T-CHO` >= '250'
SELECT T1.`ID`, T1.`SEX`, T1.`Diagnosis` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`ALB` < 3.5
SELECT CAST(SUM(CASE WHEN T1.`SEX` = 'F' AND (T2.`TP` < '6.0' OR T2.`TP` > '8.5') THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.`ID`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID`
SELECT AVG(`aCL IgG`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Patient`.`Admission` = '+' AND (strftime('%Y', 'now') - strftime('%Y', `Patient`.`Birthday`)) >= 50
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` WHERE `Patient`.`SEX` = 'F' AND strftime('%Y', `Patient`.`Description`) = '1997' AND `Patient`.`Admission` = '-'
SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', `Birthday`)) AS age FROM `Patient`
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = '1' AND T2.SEX = 'F' AND strftime('%Y', T1.Examination Date) = '1997'
SELECT MAX(strftime('%Y', `Birthday`)) - MIN(strftime('%Y', `Birthday`)) AS age_gap FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`TG` >= 200
SELECT T1.Symptoms, T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Symptoms IS NOT NULL ORDER BY T2.Birthday DESC LIMIT 1
SELECT COUNT(`Laboratory`.`ID`) / 12.0 FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`Date` BETWEEN '1998-01-01' AND '1998-12-31'
SELECT T2.`Date`, strftime('%Y', T1.`First Date`) - strftime('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' ORDER BY T1.Birthday LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T1.UA <= '8.0' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.SEX = 'F' AND T1.UA <= '6.5' THEN 1 ELSE 0 END) AS Ratio FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` LEFT JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE (`Examination`.`Examination Date` IS NULL OR (strftime('%Y', `Examination`.`Examination Date`) - strftime('%Y', `Patient`.`First Date`)) >= 1)
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE strftime('%Y', `Examination`.`Examination Date`) BETWEEN '1990' AND '1993' AND strftime('%Y', `Patient`.`Birthday`) < '18'
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`T-BIL` >= '2.0'
SELECT `Diagnosis`, COUNT(`Diagnosis`) AS DiagnosisCount FROM `Examination` WHERE `Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY `Diagnosis` ORDER BY DiagnosisCount DESC LIMIT 1
SELECT AVG(1999 - strftime('%Y', `Patient`.`Birthday`)) AS average_age FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Laboratory`.`Date` BETWEEN '1991-10-01' AND '1991-10-30'
SELECT T1.`Diagnosis`, strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`Birthday`) AS age FROM `Patient` AS T1 INNER JOIN `Examination` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`aCL IgG` = (SELECT MAX(`aCL IgG`) FROM `Examination`) LIMIT 1
SELECT `ANA` FROM `Examination` WHERE `ID` = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN T1.T-CHO < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'AORTITIS' ORDER BY T2.Examination Date ASC LIMIT 1
SELECT `aCL IgM` FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Patient`.`Diagnosis` = 'SLE' AND `Patient`.`Description` = '1994-02-19' AND `Examination`.`Examination Date` = '1993/11/12'
SELECT `Patient`.`SEX` FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Laboratory`.`Date` = '1992-06-12' AND `Laboratory`.`GPT` = '9'
SELECT strftime('%Y', '1991-10-21') - strftime('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date = '1991-10-21' AND T2.UA = '8.4'
SELECT COUNT(`Laboratory`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`First Date` = '1991-06-13' AND `Patient`.`Diagnosis` = 'SJS' AND `Laboratory`.`Date` LIKE '1995-%'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`Examination Date` = '1997-01-27' AND T2.Diagnosis = 'SLE'
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT (SUM(CASE WHEN `Date` LIKE '1981-11-%' THEN `T-CHO` END) - SUM(CASE WHEN `Date` LIKE '1981-12-%' THEN `T-CHO` END)) / SUM(CASE WHEN `Date` LIKE '1981-11-%' THEN `T-CHO` END) * 100 AS decrease_rate FROM Laboratory WHERE `ID` = (SELECT `ID` FROM Patient WHERE `Birthday` = '1959-02-18')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet' AND T2.`Examination Date` >= '1997-01-01' AND T2.`Examination Date` < '1998-01-01'
SELECT DISTINCT `Patient`.`ID` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`Date` BETWEEN '1987-07-06' AND '1996-01-31' AND `Laboratory`.`GPT` > 30 AND `Laboratory`.`ALB` < 4
SELECT `ID` FROM `Patient` WHERE `SEX` = 'F' AND strftime('%Y', `Birthday`) = '1964' AND `Admission` = '+'
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`Thrombosis` = 2 AND `Examination`.`ANA` = 'S' AND `Examination`.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM `Examination`)
SELECT (COUNT(CASE WHEN `Laboratory`.`UA` <= 6.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN `Laboratory`.`U-PRO` > 0 AND `Laboratory`.`U-PRO` < 30 THEN 1 END)) AS percentage FROM `Laboratory` WHERE `Laboratory`.`U-PRO` > 0 AND `Laboratory`.`U-PRO` < 30
SELECT (COUNT(DISTINCT CASE WHEN `Diagnosis` = 'BEHCET' THEN `ID` END) * 100.0 / COUNT(DISTINCT `ID`)) AS Percentage FROM `Patient` WHERE `SEX` = 'M' AND YEAR(`First Date`) = '1981'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.T-BIL < 2.0
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`ANA Pattern` != 'P' AND T2.SEX = 'F' AND T2.Birthday BETWEEN '1980-01-01' AND '1989-12-31'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(`ALB`) AS average_blood_albumin_level FROM `Laboratory` AS T1 INNER JOIN `Patient` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`SEX` = 'F' AND T1.`PLT` > 400 AND T2.`Diagnosis` = 'SLE'
SELECT `Symptoms` FROM `Examination` WHERE `Diagnosis` = 'SLE' GROUP BY `Symptoms` ORDER BY COUNT(`Symptoms`) DESC LIMIT 1
SELECT `Patient`.`Description`, `Patient`.`First Date` FROM `Patient` WHERE `Patient`.`ID` = 48473
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.Diagnosis = 'APS'
SELECT COUNT(DISTINCT `Laboratory`.`ID`) FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE YEAR(`Laboratory`.`Date`) = '1997' AND (`Laboratory`.`TP` <= 6 OR `Laboratory`.`TP` >= 8.5)
SELECT (CAST(SUM(CASE WHEN `Diagnosis` LIKE '%ITP%' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN `Diagnosis` LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL)) * 100 AS proportion FROM Examination WHERE `Symptoms` LIKE '%thrombocytopenia%'
SELECT CAST(SUM(CASE WHEN `Patient`.`SEX` = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`Patient`.`ID`) AS percentage FROM `Patient` WHERE `Patient`.`Birthday` LIKE '%1980%' AND `Patient`.`Diagnosis` = 'RA'
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Examination`.`Examination Date` BETWEEN '1995' AND '1997' AND `Patient`.`Diagnosis` = 'Behcet' AND `Patient`.`Admission` = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5
SELECT DATEDIFF(`Examination Date`, `First Date`) AS days_before_evaluation FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.ID = '821298'
SELECT CASE WHEN (UA > 8.0 AND SEX = 'M') OR (UA > 6.5 AND SEX = 'F') THEN 'Yes' ELSE 'No' END AS within_normal_range FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ID = 57266
SELECT `Date` FROM `Laboratory` WHERE `ID` = '48473' AND `GOT` >= 60
SELECT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND strftime('%Y', T2.Date) = '1994'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GPT > 60 ORDER BY T2.Birthday ASC
SELECT AVG(`LDH`) FROM `Laboratory` WHERE `LDH` < 500
SELECT `Patient`.`ID`, (strftime('%Y', 'now') - strftime('%Y', `Patient`.`Birthday`)) AS age FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`LDH` BETWEEN 600 AND 800
SELECT `Patient`.`Admission` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`ALP` < 300
SELECT P.`ID`, L.`ALP` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`Birthday` = '1982-04-01' AND L.`ALP` < 300
SELECT `Patient`.`ID`, `Patient`.`SEX`, `Patient`.`Birthday` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`TP` < 6.0
SELECT `Patient`.`ID`, (`Laboratory`.`TP` - 8.5) AS TP_Deviation FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`SEX` = 'F' AND `Laboratory`.`TP` > 8.5
SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Not Within Normal Range' END AS Albumin_Status FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1982'
SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND T1.ID IN (SELECT T2.ID FROM Laboratory AS T2 WHERE T2.UA > 6.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F'
SELECT AVG(`Laboratory`.`UA`) AS average_UA_index FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE (`Laboratory`.`UA` < 8.0 AND `Patient`.`SEX` = 'M') OR (`Laboratory`.`UA` < 6.5 AND `Patient`.`SEX` = 'F') AND `Laboratory`.`Date` = (SELECT MAX(`Laboratory`.`Date`) FROM `Laboratory` WHERE `Laboratory`.`ID` = `Patient`.`ID`)
SELECT `Patient`.`ID`, `Patient`.`SEX`, `Patient`.`Birthday` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`UN` = 29
SELECT `Patient`.`ID`, `Patient`.`SEX`, `Patient`.`Birthday` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`Diagnosis` = 'RA' AND `Laboratory`.`UN` < 30
SELECT COUNT(DISTINCT `Laboratory`.`ID`) FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Laboratory`.`CRE` >= 1.5 AND `Patient`.`SEX` = 'M'
SELECT (SUM(CASE WHEN `SEX` = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN `SEX` = 'F' THEN 1 ELSE 0 END)) AS result FROM `Laboratory` WHERE `CRE` >= 1.5
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1
SELECT T1.SEX, GROUP_CONCAT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX
SELECT T1.ID, T2.T-CHO FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = (SELECT MIN(Birthday) FROM Patient) AND T2.T-CHO = (SELECT MAX(T-CHO) FROM Laboratory)
SELECT SUM(CASE WHEN T2.deathdate IS NULL THEN ROUND((strftime('%J', date('now')) - strftime('%J', T2.birthdate)) / 365) ELSE ROUND((strftime('%J', T2.deathdate) - strftime('%J', T2.birthdate)) / 365) END) / COUNT(T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.T-CHO >= 250 AND T2.SEX = 'M'
SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) > 50
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T1.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND T2.CPK >= 250
SELECT T1.ID, T1.SEX, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.T-CHO < 250
SELECT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Description LIKE '%1991%' AND T2.GLU < 180
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX ORDER BY T1.Birthday ASC
SELECT T1.ID, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
SELECT P.`ID`, P.`Admission` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.`Birthday`)) >= 50 AND (L.`RBC` <= 3.5 OR L.`RBC` >= 6.0)
SELECT `Patient`.`ID`, `Patient`.`SEX` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`Admission` = '-' AND `Laboratory`.`HGB` < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1
SELECT T1.ID, strftime('%Y', 'now') - strftime('%Y', T1.Birthday) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT >= 52 GROUP BY T1.ID HAVING COUNT(T2.ID) > 2
SELECT AVG(`HCT`) FROM `Laboratory` WHERE `Date` LIKE '1991%' AND `HCT` < 29
SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal FROM Laboratory WHERE PLT <= 100 OR PLT >= 400
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T2.Date) = '1984' AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 50 AND T2.PLT BETWEEN 100 AND 400
SELECT (CAST(SUM(CASE WHEN `Laboratory`.`PT` >= 14 AND `Patient`.`SEX` = 'F' THEN 1 ELSE 0 END) AS REAL) / COUNT(`Laboratory`.`PT` >= 14)) * 100 AS percentage FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE (strftime('%Y', 'now') - strftime('%Y', `Patient`.`Birthday`)) > 55
SELECT DISTINCT `Patient`.`ID` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE strftime('%Y', `Patient`.`First Date`) > '1992' AND `Laboratory`.`PT` < 14
SELECT COUNT(*) FROM Examination WHERE `Examination Date` > '1997-01-01' AND `APTT` < 45
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.APTT > 45 AND T1.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`Birthday` > '1980-01-01' AND (`Laboratory`.`FG` < 150 OR `Laboratory`.`FG` > 450)
SELECT DISTINCT `Patient`.`Diagnosis` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`U-PRO` >= 30
SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.`Diagnosis` = 'SLE'
SELECT COUNT(DISTINCT `Laboratory`.`ID`) FROM `Laboratory` WHERE `Laboratory`.`IGG` >= 2000
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`IGG` > 900 AND `Laboratory`.`IGG` < 2000 AND `Patient`.`Symptoms` IS NOT NULL
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 ORDER BY T2.IGA DESC LIMIT 1
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`IGA` > 80 AND `Laboratory`.`IGA` < 500 AND strftime('%Y', `Patient`.`First Date`) >= '1990'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM <= 40 OR T2.IGM >= 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`CRP` = '+' AND `Patient`.`Description` IS NULL
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`RA` IN ('-', '+-') AND `Examination`.`KCT` = '+'
SELECT DISTINCT T1.`Diagnosis` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE YEAR(T1.`Birthday`) >= 1985 AND T2.`RA` IN ('-', '+-')
SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`RF` < 20 AND (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) > 60
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`RF` < 20 AND `Examination`.`Thrombosis` = '0'
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`C3` > 35 AND `Examination`.`ANA Pattern` = 'P'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.HCT NOT BETWEEN 29 AND 52 ORDER BY T2.aCL IgA DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis = 1 AND T2.C4 > 10
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`RNP` IN ('-', '+-') AND `Patient`.`Admission` = '+'
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE (`Examination`.`SM` IN ('-', '+-') OR `Examination`.`SM` = 'negative' OR `Examination`.`SM` = '0') AND `Examination`.`Thrombosis` = 0
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative', '0') ORDER BY T1.Birthday DESC LIMIT 3
SELECT `Examination`.`ID` FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Examination`.`Examination Date` > '1997-01-01' AND `Laboratory`.`SC170` IN ('negative', '0')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.SC170 IN ('negative', '0') AND T2.Symptoms IS NULL
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE `Examination`.`SSA` IN('-','+-') AND strftime('%Y', `Patient`.`First Date`) < '2000'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('negative', '0') ORDER BY T1.First Date ASC LIMIT 1
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`SSB` IN ('-', '+-') AND `Patient`.`Diagnosis` = 'SLE'
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`SSB` IN ('negative', '0') AND `Examination`.`Symptoms` IS NOT NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('-', '+-') AND T2.SSB IN ('-', '+-') AND T1.SEX = 'M'
SELECT DISTINCT `Patient`.`Diagnosis` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`DNA` >= 8
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`DNA` < 8 AND `Patient`.`Description` IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG < 2000 AND T1.Admission = '+'
SELECT (COUNT(DISTINCT `Laboratory`.`ID`) * 1.0) / (SELECT COUNT(DISTINCT `Laboratory`.`ID`) FROM `Laboratory` WHERE `GOT` >= 60) * 100 AS percentage FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `GOT` >= 60 AND `Diagnosis` = 'SLE'
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`GOT` < 60
SELECT MIN(`Birthday`) FROM `Patient` WHERE `ID` IN (SELECT `ID` FROM `Laboratory` WHERE `GOT` >= 60)
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Examination`.`GOT` < 60
SELECT MIN(`First Date`) FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.ID = T2.ID WHERE T2.LDH < 500 ORDER BY T2.LDH DESC LIMIT 1
SELECT MAX(`Laboratory`.`Date`) FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Laboratory`.`LDH` >= 500 AND `Patient`.`First Date` = (SELECT MAX(`First Date`) FROM `Patient`)
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`ALP` >= 300 AND `Patient`.`Admission` = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT DISTINCT `Patient`.`Diagnosis` FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`TP` < 6.0
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T2.ID = T3.ID WHERE T1.Diagnosis = 'SJS' AND T3.TP > 6.0 AND T3.TP < 8.5
SELECT `Examination Date` FROM Examination WHERE `ALB` = (SELECT MAX(`ALB`) FROM Examination WHERE `ALB` > 3.5 AND `ALB` < 5.5)
SELECT COUNT(DISTINCT `Laboratory`.`ID`) FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`ALB` > 3.5 AND `Laboratory`.`ALB` < 5.5 AND `Laboratory`.`TP` BETWEEN 6.0 AND 8.5
SELECT `aCL IgG`, `aCL IgM`, `aCL IgA` FROM Examination WHERE ID = (SELECT ID FROM Laboratory WHERE UA = (SELECT MAX(UA) FROM Laboratory WHERE UA > 6.50) AND ID IN (SELECT ID FROM Patient WHERE SEX = 'F'))
SELECT MAX(`ANA`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `CRE` < 1.5
SELECT T1.ID FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T1.aCL IgA = (SELECT MAX(`aCL IgA`) FROM Examination WHERE `CRE` < 1.5)
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`T-BIL` >= 2.0 AND `Examination`.`ANA Pattern` LIKE '%P%'
SELECT DISTINCT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0)
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`T-CHO` >= 250 AND `Examination`.`KCT` = '-'
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`T-CHO` < 250 AND `Examination`.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`TG` < 200 AND `Examination`.`Symptoms` IS NOT NULL
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1
SELECT DISTINCT `Patient`.`ID` FROM `Patient` INNER JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Examination`.`Thrombosis` = 0 AND `Laboratory`.`CPK` < 250
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Laboratory` ON `Examination`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`CPK` < 250 AND (`Examination`.`KCT` = '+' OR `Examination`.`RVVT` = '+' OR `Examination`.`LAC` = '+')
SELECT MIN(`Birthday`) FROM `Patient` WHERE `ID` IN (SELECT `ID` FROM `Laboratory` WHERE `GLU` > 180)
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` INNER JOIN `Examination` ON `Patient`.`ID` = `Examination`.`ID` WHERE `Laboratory`.`GLU` < 180 AND `Examination`.`Thrombosis` = 0
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Patient`.`Diagnosis` = 'SLE' AND `Laboratory`.`WBC` BETWEEN 3.5 AND 9.0
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND T1.Admission = '-'
SELECT COUNT(DISTINCT `Patient`.`ID`) FROM `Patient` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`PLT` > 100 AND `Laboratory`.`PLT` < 400 AND `Patient`.`Diagnosis` IS NOT NULL
SELECT T1.PLT FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'
SELECT AVG(`PT`) FROM `Laboratory` INNER JOIN `Patient` ON `Laboratory`.`ID` = `Patient`.`ID` WHERE `Patient`.`SEX` = 'M' AND `Laboratory`.`PT` < 14
SELECT COUNT(DISTINCT `Examination`.`ID`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Examination`.`Thrombosis` IN (1, 2) AND `Examination`.`PT` < 14
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(`member`.`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`college` = 'College of Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design'
SELECT COUNT(DISTINCT `attendance`.`link_to_member`) FROM `attendance` INNER JOIN `event` ON `attendance`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'Women''s Soccer'
SELECT T1.phone FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer'
SELECT COUNT(*) FROM `member` AS T1 INNER JOIN `attendance` AS T2 ON T1.member_id = T2.link_to_member INNER JOIN `event` AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Women''s Soccer' AND T1.t_shirt_size = 'Medium'
SELECT `event_name` FROM `event` WHERE `event_id` = (SELECT `link_to_event` FROM `attendance` GROUP BY `link_to_event` ORDER BY COUNT(`link_to_event`) DESC LIMIT 1)
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(DISTINCT A.link_to_event) FROM `attendance` AS A INNER JOIN `member` AS M ON A.link_to_member = M.member_id INNER JOIN `event` AS E ON A.link_to_event = E.event_id WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison' AND E.type = 'Student_Club' AND YEAR(E.event_date) = 2019
SELECT COUNT(`event_id`) FROM `event` WHERE `type` = 'Meeting' AND `event_id` IN (SELECT `link_to_event` FROM `attendance` GROUP BY `link_to_event` HAVING COUNT(`link_to_member`) > 10)
SELECT `event`.`event_name` FROM `event` INNER JOIN `attendance` ON `event`.`event_id` = `attendance`.`link_to_event` WHERE `event`.`type` <> 'fundraiser' GROUP BY `event`.`event_id` HAVING COUNT(`attendance`.`link_to_event`) > 20
SELECT CAST(COUNT(`attendance`.`link_to_event`) AS REAL) / COUNT(DISTINCT `event`.`event_name`) FROM `event` INNER JOIN `attendance` ON `event`.`event_id` = `attendance`.`link_to_event` WHERE `event`.`type` = 'Meeting' AND strftime('%Y', `event`.`event_date`) = '2020'
SELECT `expense_description` FROM expense WHERE cost = (SELECT MAX(cost) FROM expense WHERE `expense_description` LIKE '%club event%')
SELECT COUNT(`member`.`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Environmental Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT `last_name` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Law and Constitutional Studies'
SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'
SELECT amount FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE position = 'Vice President')
SELECT SUM(`expense`.`cost`) FROM `expense` INNER JOIN `budget` ON `expense`.`link_to_budget` = `budget`.`budget_id` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'September Meeting' AND `expense`.`category` = 'Food'
SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'
SELECT `first_name`, `last_name` FROM `member` INNER JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `zip_code`.`state` = 'Illinois'
SELECT SUM(`T2`.`spent`) FROM `event` AS `T1` INNER JOIN `budget` AS `T2` ON `T1`.`event_id` = `T2`.`link_to_event` WHERE `T1`.`event_name` = 'September Meeting' AND `T2`.`category` = 'Advertisement'
SELECT T3.department FROM member AS T1 INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T1.first_name = 'Pierce' AND T1.last_name = 'Guidi'
SELECT SUM(`amount`) FROM `budget` WHERE `link_to_event` = (SELECT `event_id` FROM `event` WHERE `event_name` = 'October Speaker')
SELECT expense_description, CASE WHEN approved = 1 THEN 'Yes' ELSE 'No' END AS approved FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Meeting' AND event_date = '2019-10-08'))
SELECT SUM(T1.cost) / COUNT(DISTINCT T1.expense_id) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Elijah' AND T2.last_name = 'Allen' AND (SUBSTR(T1.expense_date, 6, 2) = '09' OR SUBSTR(T1.expense_date, 6, 2) = '10')
SELECT SUM(CASE WHEN STRFTIME('%Y', `event_date`) = '2019' THEN `spent` ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', `event_date`) = '2020' THEN `spent` ELSE 0 END) FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`type` = 'Student_Club'
SELECT `location` FROM `event` WHERE `event_name` = 'Spring Budget Review'
SELECT SUM(b.`spent`) FROM `budget` AS b INNER JOIN `event` AS e ON b.`link_to_event` = e.`event_id` WHERE e.`event_name` = 'Posters' AND e.`event_date` = '2019-09-04'
SELECT `remaining` FROM `budget` WHERE `category` = 'Food' ORDER BY `amount` DESC LIMIT 1
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(*) FROM `major` WHERE `college` = 'College of Humanities and Social Sciences'
SELECT `phone` FROM `member` WHERE `first_name` = 'Carlo' AND `last_name` = 'Jacobs'
SELECT T1.county FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Adela' AND T2.last_name = 'O\'Gallagher'
SELECT COUNT(*) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0
SELECT SUM(`amount`) FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'September Speaker'
SELECT `event`.`status` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` INNER JOIN `expense` ON `budget`.`budget_id` = `expense`.`link_to_budget` WHERE `expense`.`expense_description` = 'Post Cards, Posters' AND `expense`.`expense_date` = '2019-08-20'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'
SELECT COUNT(`member`.`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Business' AND `member`.`t_shirt_size` = 'Medium'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT `major_name` FROM `major` WHERE `major_id` = (SELECT `link_to_major` FROM `member` WHERE `position` = 'Vice President' LIMIT 1)
SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1
SELECT CAST(SUM(CASE WHEN `event`.`event_name` = 'Yearly Kickoff' THEN `budget`.`amount` ELSE 0 END) AS REAL) / SUM(CASE WHEN `event`.`event_name` = 'October Meeting' THEN `budget`.`amount` ELSE 0 END) FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `budget`.`category` = 'Advertisement'
SELECT (SUM(CASE WHEN `category` = 'Parking' THEN `amount` ELSE 0 END) / SUM(`amount`)) * 100 AS percentage FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'November Speaker'
SELECT SUM(`cost`) FROM `expense` WHERE `expense_description` = 'Pizza'
SELECT COUNT(DISTINCT `city`) FROM `zip_code` WHERE `county` = 'Orange County' AND `state` = 'Virginia'
SELECT DISTINCT `department` FROM `major` WHERE `college` = 'College of Humanities and Social Sciences'
SELECT T1.city, T1.county, T1.state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Amy' AND T2.last_name = 'Firth'
SELECT `expense_description` FROM `expense` WHERE `link_to_budget` = (SELECT `budget_id` FROM `budget` ORDER BY `remaining` LIMIT 1)
SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'
SELECT T.college FROM ( SELECT major.college, COUNT(member.member_id) AS num FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ) T ORDER BY T.num DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT `event_name` FROM `event` WHERE `event_id` = (SELECT `link_to_event` FROM `budget` ORDER BY `amount` DESC LIMIT 1)
SELECT `expense_description`, `expense_date`, `cost` FROM `expense` INNER JOIN `member` ON `expense`.`link_to_member` = `member`.`member_id` WHERE `member`.`position` = 'Vice President'
SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'
SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason')
SELECT COUNT(DISTINCT `member`.`member_id`) FROM `member` INNER JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `zip_code`.`state` = 'MD'
SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'
SELECT `member`.`first_name`, `member`.`last_name` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`department` = 'School of Applied Sciences, Technology and Education'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = 'Closed' ORDER BY T2.spent / T2.amount DESC LIMIT 1
SELECT COUNT(*) FROM `member` WHERE `position` = 'President'
SELECT MAX(spent) FROM budget
SELECT COUNT(`event_id`) FROM `event` WHERE `type` = 'Meeting' AND YEAR(`event_date`) = 2020
SELECT SUM(`spent`) FROM `budget` WHERE `category` = 'Food'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T2.major_name = 'Interior Design' AND T4.event_name = 'Community Theater'
SELECT `first_name`, `last_name` FROM `member` INNER JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `zip_code`.`city` = 'Georgetown' AND `zip_code`.`state` = 'South Carolina'
SELECT COUNT(`income`.`amount`) FROM `income` INNER JOIN `member` ON `income`.`link_to_member` = `member`.`member_id` WHERE `member`.`first_name` = 'Grant' AND `member`.`last_name` = 'Gilmour'
SELECT `first_name`, `last_name` FROM `member` JOIN `income` ON `member`.`member_id` = `income`.`link_to_member` WHERE `income`.`amount` > 40
SELECT SUM(`cost`) FROM `expense` AS T1 INNER JOIN `budget` AS T2 ON T1.`link_to_budget` = T2.`budget_id` INNER JOIN `event` AS T3 ON T2.`link_to_event` = T3.`event_id` WHERE T3.`event_name` = 'Yearly Kickoff'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN budget AS T2 ON T1.member_id = T2.link_to_event INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'
SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income)
SELECT `event`.`event_name` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` ORDER BY `budget`.`spent` LIMIT 1
SELECT CAST(SUM(CASE WHEN `event`.`event_name` = 'Yearly Kickoff' THEN `expense`.`cost` ELSE 0 END) AS REAL) * 100 / SUM(`expense`.`cost`) FROM `expense` INNER JOIN `budget` ON `expense`.`link_to_budget` = `budget`.`budget_id` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id`
SELECT CAST(SUM(CASE WHEN `major_name` = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN `major_name` = 'Physics' THEN 1 ELSE 0 END) FROM `major`
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1
SELECT `first_name`, `last_name`, `email` FROM `member` WHERE `position` = 'Secretary'
SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching'
SELECT COUNT(DISTINCT `attendance`.`link_to_member`) FROM `attendance` INNER JOIN `event` ON `attendance`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'Community Theater' AND YEAR(`event`.`event_date`) = 2019
SELECT COUNT(T1.link_to_event) AS event_count, T3.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi' GROUP BY T3.major_name
SELECT SUM(`spent`) / COUNT(`spent`) FROM `budget` WHERE `category` = 'Food' AND `event_status` = 'Closed'
SELECT `event_name` FROM `event` AS T1 INNER JOIN `budget` AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' ORDER BY T2.spent DESC LIMIT 1
SELECT COUNT(*) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean' AND T2.event_name = 'Women''s Soccer'
SELECT CAST(SUM(CASE WHEN `type` = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`event_id`) FROM `event` WHERE `event_date` BETWEEN '2019-01-01' AND '2019-12-31'
SELECT `expense`.`cost` FROM `expense` INNER JOIN `budget` ON `expense`.`link_to_budget` = `budget`.`budget_id` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `expense`.`expense_description` = 'Posters' AND `event`.`event_name` = 'September Speaker'
SELECT T1.t_shirt_size FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.t_shirt_size ORDER BY COUNT(T1.t_shirt_size) DESC LIMIT 1
SELECT `event_name` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` WHERE `event`.`status` = 'Closed' AND `budget`.`remaining` < 0 ORDER BY `budget`.`remaining` LIMIT 1
SELECT `expense`.`expense_description`, SUM(`expense`.`cost`) AS total_value FROM `expense` INNER JOIN `budget` ON `expense`.`link_to_budget` = `budget`.`budget_id` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'October Meeting' AND `expense`.`approved` = 't' GROUP BY `expense`.`expense_description`
SELECT `category`, SUM(`amount`) AS amount_budgeted FROM `budget` WHERE `link_to_event` = (SELECT `event_id` FROM `event` WHERE `event_name` = 'April Speaker') GROUP BY `category` ORDER BY amount_budgeted ASC
SELECT MAX(`amount`) FROM `budget` WHERE `category` = 'Food'
SELECT `budget_id`, `amount` FROM `budget` WHERE `category` = 'Advertisement' ORDER BY `amount` DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(`cost`) FROM `expense` WHERE `expense_date` = '2019-08-20'
SELECT T1.first_name, T1.last_name, SUM(T2.cost) AS total_cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name
SELECT `expense_description` FROM `expense` AS T1 INNER JOIN `member` AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T2.`first_name` = 'Sacha' AND T2.`last_name` = 'Harrison'
SELECT `expense_description` FROM `expense` AS T1 INNER JOIN `member` AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'
SELECT `member`.`zip` FROM `expense` INNER JOIN `member` ON `expense`.`link_to_member` = `member`.`member_id` WHERE `expense`.`cost` < 50
SELECT T2.`major_name` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`first_name` = 'Phillip' AND T1.`last_name` = 'Cullen'
SELECT `position` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Business'
SELECT COUNT(`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Business' AND `member`.`t_shirt_size` = 'Medium'
SELECT `event`.`type` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` WHERE `budget`.`remaining` > 30
SELECT DISTINCT `category` FROM `budget` WHERE `link_to_event` IN (SELECT `event_id` FROM `event` WHERE `location` = 'MU 215')
SELECT `type` FROM `event` WHERE `event_date` = '2020-03-24T12:00:00'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT CAST(SUM(CASE WHEN `position` = 'Member' AND `major_name` = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id`
SELECT DISTINCT `type` FROM `event` WHERE `location` = 'MU 215'
SELECT COUNT(*) FROM `income` WHERE `amount` = 50
SELECT COUNT(`member_id`) FROM `member` WHERE `position` = 'Member' AND `t_shirt_size` = 'X-Large'
SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT `category` FROM `budget` AS T1 INNER JOIN `event` AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215' AND T2.type = 'Guest Speaker' AND T1.spent = 0
SELECT DISTINCT `zip_code`.`city`, `zip_code`.`state` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` INNER JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `major`.`department` = 'Electrical and Computer Engineering Department' AND `member`.`position` = 'Member'
SELECT `event_name` FROM `event` WHERE `event_id` IN (SELECT `link_to_event` FROM `attendance` WHERE `link_to_member` = (SELECT `member_id` FROM `member` WHERE `position` = 'Vice President' AND `zip` = (SELECT `zip_code` FROM `zip_code` WHERE `city` = '900 E. Washington St.'))) AND `type` = 'Social'
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T2.last_name FROM `event` AS T1 INNER JOIN `attendance` AS T2 ON T1.event_id = T2.link_to_event INNER JOIN `member` AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.position = 'Member'
SELECT CAST(COUNT(CASE WHEN `income`.`amount` = 50 THEN 1 END) AS REAL) * 100 / COUNT(`member`.`member_id`) FROM `member` LEFT JOIN `income` ON `member`.`member_id` = `income`.`link_to_member` WHERE `member`.`t_shirt_size` = 'Medium'
SELECT DISTINCT T2.short_state FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.type = 'PO Box'
SELECT `zip_code` FROM `zip_code` WHERE `type` = 'PO Box' AND `county` = 'San Juan Municipio' AND `state` = 'Puerto Rico'
SELECT `event_name` FROM `event` WHERE `type` = 'Game' AND `status` = 'Closed' AND `event_date` BETWEEN '2019-03-15' AND '2020-03-20'
SELECT DISTINCT T1.link_to_event FROM attendance AS T1 INNER JOIN expense AS T2 ON T1.link_to_member = T2.link_to_member WHERE T2.cost > 50
SELECT DISTINCT T1.member_id, T1.first_name, T1.last_name, T3.link_to_event FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN attendance AS T3 ON T1.member_id = T3.link_to_member WHERE T2.approved = 'true' AND T2.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'
SELECT `member`.`phone` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Business' AND `major`.`college` = 'College of Agriculture and Applied Sciences'
SELECT `member`.`email` FROM `expense` INNER JOIN `member` ON `expense`.`link_to_member` = `member`.`member_id` WHERE `expense`.`expense_date` BETWEEN '2019-09-10' AND '2019-11-19' AND `expense`.`cost` > 20
SELECT COUNT(`member`.`member_id`) FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'education' AND `major`.`college` = 'College of Education & Human Services'
SELECT CAST(SUM(CASE WHEN `remaining` < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`event_id`) FROM `budget`
SELECT `event_id`, `location`, `status` FROM `event` WHERE `event_date` BETWEEN '2019-11-01' AND '2020-03-31'
SELECT `expense_description` FROM `expense` GROUP BY `expense_description` HAVING SUM(`cost`) / COUNT(`expense_id`) > 50
SELECT `first_name`, `last_name` FROM `member` WHERE `t_shirt_size` = 'X-Large'
SELECT CAST(COUNT(CASE WHEN `type` = 'PO Box' THEN `zip_code` ELSE NULL END) AS REAL) * 100 / COUNT(`zip_code`) FROM `zip_code`
SELECT `event_name`, `location` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` WHERE `remaining` > 0
SELECT `event`.`event_name`, `event`.`event_date` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` INNER JOIN `expense` ON `budget`.`budget_id` = `expense`.`link_to_budget` WHERE `expense`.`expense_description` = 'Pizza' AND `expense`.`cost` > 50 AND `expense`.`cost` < 100
SELECT `member`.`first_name`, `member`.`last_name`, `major`.`major_name` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` INNER JOIN `expense` ON `member`.`member_id` = `expense`.`link_to_member` WHERE `expense`.`cost` > 100
SELECT z.`city`, z.`county` FROM `event` AS e INNER JOIN `income` AS i ON e.`event_id` = i.`link_to_event` INNER JOIN `member` AS m ON i.`link_to_member` = m.`member_id` INNER JOIN `zip_code` AS z ON m.`zip` = z.`zip_code` WHERE i.`amount` > 40 GROUP BY e.`event_id`
SELECT T1.`first_name`, T1.`last_name` FROM member AS T1 INNER JOIN expense AS T2 ON T1.`member_id` = T2.`link_to_member` INNER JOIN budget AS T3 ON T2.`link_to_budget` = T3.`budget_id` INNER JOIN event AS T4 ON T3.`link_to_event` = T4.`event_id` GROUP BY T1.`member_id` HAVING COUNT(DISTINCT T4.`event_id`) > 1 ORDER BY SUM(T2.`cost`) DESC LIMIT 1
SELECT SUM(T1.cost) / COUNT(DISTINCT T2.event_id) AS average_amount_paid FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position != 'Member'
SELECT `event`.`event_name` FROM `event` INNER JOIN `budget` ON `event`.`event_id` = `budget`.`link_to_event` WHERE `budget`.`category` = 'Parking' AND `budget`.`spent` < (SELECT SUM(`spent`) / COUNT(`event_id`) FROM `budget` WHERE `category` = 'Parking')
SELECT CAST(SUM(cost) AS REAL) * 100 / (SELECT COUNT(event_id) FROM event WHERE type = 'Meeting') FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.type = 'Meeting'
SELECT `budget`.`budget_id`, MAX(`expense`.`cost`) FROM `budget` INNER JOIN `expense` ON `budget`.`budget_id` = `expense`.`link_to_budget` WHERE `expense`.`expense_description` = 'Water, chips, cookies' GROUP BY `budget`.`budget_id` ORDER BY MAX(`expense`.`cost`) DESC LIMIT 1
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5
SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)
SELECT CAST(SUM(CASE WHEN T1.state = 'New Jersey' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) - CAST(SUM(CASE WHEN T1.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT `last_name`, `phone` FROM `member` WHERE `link_to_major` IN (SELECT `major_id` FROM `major` WHERE `major_name` = 'Elementary Education')
SELECT `category`, `amount` FROM `budget` WHERE `link_to_event` = (SELECT `event_id` FROM `event` WHERE `event_name` = 'January Speaker')
SELECT `event_name` FROM `event` AS T1 INNER JOIN `budget` AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'
SELECT `first_name`, `last_name`, `amount` FROM `income` INNER JOIN `member` ON `income`.`link_to_member` = `member`.`member_id` WHERE `date_received` = '2019-09-09'
SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Posters' LIMIT 1
SELECT `member`.`first_name`, `member`.`last_name`, `major`.`college` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `member`.`position` = 'Secretary'
SELECT `event`.`event_name`, SUM(`budget`.`spent`) AS total_spent FROM `budget` INNER JOIN `event` ON `budget`.`link_to_event` = `event`.`event_id` WHERE `budget`.`category` = 'Speaker Gifts' GROUP BY `event`.`event_name`
SELECT city FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Garrett' AND last_name = 'Gerke')
SELECT `first_name`, `last_name`, `position` FROM `member` WHERE `zip` = '28092'
SELECT COUNT(*) FROM gasstations WHERE `Country` = 'CZE' AND `Segment` = 'Premium'
SELECT CAST(SUM(IIF(`Currency` = 'EUR', 1, 0)) AS REAL) / CAST(SUM(IIF(`Currency` = 'CZK', 1, 0)) AS REAL) FROM customers
SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'LAM' AND T1.Date BETWEEN 201201 AND 201212 ORDER BY T1.Consumption ASC LIMIT 1
SELECT AVG(`Consumption`) / 12 AS `Average_Monthly_Consumption` FROM `yearmonth` WHERE `CustomerID` IN (SELECT `CustomerID` FROM `customers` WHERE `Segment` = 'SME') AND `Date` BETWEEN 201301 AND 201312
SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 ORDER BY T2.Consumption DESC LIMIT 1
SELECT COUNT(DISTINCT `yearmonth`.`CustomerID`) FROM `yearmonth` INNER JOIN `customers` ON `yearmonth`.`CustomerID` = `customers`.`CustomerID` WHERE `customers`.`Segment` = 'KAM' AND `yearmonth`.`Date` BETWEEN 201201 AND 201212 AND `yearmonth`.`Consumption` < 30000
SELECT (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') AND Date BETWEEN 201201 AND 201212) - (SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') AND Date BETWEEN 201201 AND 201212) AS DifferenceInConsumption
SELECT `Date` FROM `yearmonth` WHERE `CustomerID` IN (SELECT `CustomerID` FROM `customers` WHERE `Currency` = 'EUR') ORDER BY `Consumption` DESC LIMIT 1
SELECT T.Segment FROM ( SELECT T1.Segment, SUM(T2.Consumption) AS total_consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ) AS T ORDER BY T.total_consumption ASC LIMIT 1
SELECT SUBSTR(`Date`, 1, 4) AS Year FROM yearmonth WHERE `CustomerID` IN (SELECT `CustomerID` FROM customers WHERE `Currency` = 'CZK') ORDER BY `Consumption` DESC LIMIT 1
SELECT SUBSTR(`Date`, 5, 2) AS Month, SUM(`Consumption`) AS TotalConsumption FROM yearmonth WHERE `CustomerID` IN (SELECT `CustomerID` FROM customers WHERE `Segment` = 'SME') AND `Date` BETWEEN '201301' AND '201312' GROUP BY Month ORDER BY TotalConsumption DESC LIMIT 1
WITH ConsumptionData AS (SELECT T1.CustomerID, T1.Segment, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN 201301 AND 201312 AND T2.Currency = 'CZK' GROUP BY T1.CustomerID, T1.Segment), MinConsumption AS (SELECT Segment, MIN(TotalConsumption) AS MinConsumption FROM ConsumptionData GROUP BY Segment), AvgConsumption AS (SELECT T1.Segment, AVG(T1.TotalConsumption) AS AvgConsumption FROM ConsumptionData AS T1 INNER JOIN MinConsumption AS T2 ON T1.Segment = T2.Segment AND T1.TotalConsumption = T2.MinConsumption GROUP BY T1.Segment) SELECT (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'SME') - (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'LAM') AS SME_LAM_Difference, (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'LAM') - (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'KAM') AS LAM_KAM_Difference, (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'KAM') - (SELECT AvgConsumption FROM AvgConsumption WHERE Segment = 'SME') AS KAM_SME_Difference;
SELECT c.Segment, (MAX(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption END) - MAX(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption END)) * 100.0 / MAX(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption END) AS PercentageIncrease FROM customers c JOIN yearmonth ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'EUR' AND c.Segment IN ('SME', 'LAM', 'KAM') GROUP BY c.Segment ORDER BY PercentageIncrease DESC LIMIT 1
SELECT SUM(`Consumption`) FROM `yearmonth` WHERE `CustomerID` = 6 AND `Date` BETWEEN 201308 AND 201311
SELECT COUNT(CASE WHEN `Country` = 'CZE' THEN 1 END) - COUNT(CASE WHEN `Country` = 'SVK' THEN 1 END) FROM `gasstations` WHERE `Segment` = 'discount'
SELECT T1.Consumption - T2.Consumption AS Difference FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.Date = '201304' AND T2.Date = '201304' WHERE T1.CustomerID = 7 AND T2.CustomerID = 5
SELECT (SELECT COUNT(*) FROM customers WHERE `Segment` = 'SME' AND `Currency` = 'CZK') - (SELECT COUNT(*) FROM customers WHERE `Segment` = 'SME' AND `Currency` = 'EUR') AS Difference
SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'Euro' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1
SELECT T1.`CustomerID`, SUM(T2.`Consumption`) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'KAM' GROUP BY T1.`CustomerID` ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUM(y.`Consumption`) FROM `yearmonth` AS y INNER JOIN `customers` AS c ON y.`CustomerID` = c.`CustomerID` WHERE y.`Date` = 201305 AND c.`Segment` = 'KAM'
SELECT (COUNT(CASE WHEN ym.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM yearmonth AS ym INNER JOIN customers AS c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'LAM'
SELECT `gasstations`.`Country`, COUNT(*) AS `TotalValueForMoneyStations` FROM `transactions_1k` INNER JOIN `gasstations` ON `transactions_1k`.`GasStationID` = `gasstations`.`GasStationID` GROUP BY `gasstations`.`Country` ORDER BY AVG(`transactions_1k`.`Amount` / `transactions_1k`.`Price`) DESC
SELECT CAST(SUM(IIF(`customers`.`Currency` = 'Euro', 1, 0)) AS REAL) * 100 / COUNT(`customers`.`CustomerID`) FROM `customers` WHERE `customers`.`Segment` = 'KAM'
SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'
SELECT CAST(SUM(IIF(`gasstations`.`Segment` = 'Premium', 1, 0)) AS REAL) * 100 / COUNT(`gasstations`.`GasStationID`) FROM `gasstations` WHERE `gasstations`.`Country` = 'Slovakia'
SELECT `CustomerID` FROM `yearmonth` WHERE `Date` = '201309' ORDER BY `Consumption` DESC LIMIT 1
SELECT T.Segment FROM ( SELECT T1.Segment, SUM(T2.Consumption) AS total_consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ) AS T ORDER BY T.total_consumption ASC LIMIT 1
SELECT T1.`CustomerID` FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Date` = '201206' AND T2.`Segment` = 'SME' ORDER BY T1.`Consumption` ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'
SELECT MAX(SUM(`yearmonth`.`Consumption`) / 12) AS MonthlyConsumption FROM `yearmonth` INNER JOIN `customers` ON `yearmonth`.`CustomerID` = `customers`.`CustomerID` WHERE `customers`.`Currency` = 'Euro' GROUP BY `yearmonth`.`CustomerID`
SELECT T3.`Description` FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN products AS T3 ON T1.`CustomerID` = T3.`ProductID` WHERE T1.`Date` LIKE '201309%'
SELECT DISTINCT `gasstations`.`Country` FROM `transactions_1k` INNER JOIN `gasstations` ON `transactions_1k`.`GasStationID` = `gasstations`.`GasStationID` WHERE `transactions_1k`.`Date` LIKE '201306%'
SELECT DISTINCT `gasstations`.`ChainID` FROM `gasstations` INNER JOIN `transactions_1k` ON `gasstations`.`GasStationID` = `transactions_1k`.`GasStationID` INNER JOIN `customers` ON `transactions_1k`.`CustomerID` = `customers`.`CustomerID` WHERE `customers`.`Currency` = 'Euro'
SELECT DISTINCT `products`.`Description` FROM `customers` INNER JOIN `transactions_1k` ON `customers`.`CustomerID` = `transactions_1k`.`CustomerID` INNER JOIN `products` ON `transactions_1k`.`ProductID` = `products`.`ProductID` WHERE `customers`.`Currency` = 'Euro'
SELECT AVG(Amount * Price) FROM transactions_1k WHERE Date LIKE '2012-01-%'
SELECT COUNT(`customers`.`CustomerID`) FROM `customers` INNER JOIN `yearmonth` ON `customers`.`CustomerID` = `yearmonth`.`CustomerID` WHERE `customers`.`Currency` = 'EUR' AND `yearmonth`.`Consumption` > 1000
SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'
SELECT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
SELECT COUNT(`TransactionID`) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000
SELECT COUNT(`transactions_1k`.`TransactionID`) FROM `transactions_1k` INNER JOIN `gasstations` ON `transactions_1k`.`GasStationID` = `gasstations`.`GasStationID` WHERE `gasstations`.`Country` = 'CZE' AND `transactions_1k`.`Date` > '2012-01-01'
SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
SELECT AVG(T2.Price) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'euro'
SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' ORDER BY T1.Amount DESC LIMIT 1
SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-25' ORDER BY t.Time ASC LIMIT 1
SELECT c.`Currency` FROM customers c INNER JOIN transactions_1k t ON c.`CustomerID` = t.`CustomerID` WHERE t.`Date` = '2012-08-24' AND t.`Time` = '16:25:00'
SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(*) FROM transactions_1k WHERE Date = '2012-08-26' AND Time < '13:00:00' AND Currency = 'CZK'
SELECT `Segment` FROM `customers` ORDER BY `CustomerID` ASC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT `ProductID` FROM transactions_1k WHERE `Date` = '2012-08-23' AND `Time` = '21:20:00'
SELECT SUM(t1.Amount) AS Total_Expenses, t1.Date FROM transactions_1k AS t1 INNER JOIN customers AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Date >= '2012-01-01' AND t1.Date < '2012-02-01' AND t1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24') GROUP BY t1.Date
SELECT COUNT(TransactionID) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-26' AND transactions_1k.Time BETWEEN '08:00:00' AND '09:00:00' AND gasstations.Country = 'CZE'
SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Amount = 214582.17 AND T2.Date LIKE '201306%'
SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467
SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Amount = 548.4 AND T2.Date = '2012-08-24'
SELECT CAST(COUNT(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'
SELECT (SUM(CASE WHEN ym.`Date` = '2012-08-25' THEN ym.Consumption ELSE 0 END) - SUM(CASE WHEN ym.`Date` = '2013-08-25' THEN ym.Consumption ELSE 0 END)) * 1.0 / SUM(CASE WHEN ym.`Date` = '2012-08-25' THEN ym.Consumption ELSE 0 END) AS consumption_decrease_rate FROM yearmonth AS ym INNER JOIN transactions_1k AS t ON ym.CustomerID = t.CustomerID WHERE t.Amount = 634.8 AND t.`Date` = '2012-08-25'
SELECT T1.`GasStationID`, SUM(T1.`Amount` * T1.`Price`) AS Revenue FROM `transactions_1k` AS T1 GROUP BY T1.`GasStationID` ORDER BY Revenue DESC LIMIT 1
SELECT CAST(SUM(IIF(`customers`.`Segment` = 'premium', 1, 0)) AS REAL) * 100 / COUNT(`customers`.`CustomerID`) FROM `customers` INNER JOIN `gasstations` ON `customers`.`CustomerID` = `gasstations`.`ChainID` WHERE `gasstations`.`Country` = 'SVK'
SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = '38508' UNION ALL SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = '38508' AND Date = '201201'
SELECT p.`Description` FROM products AS p INNER JOIN transactions_1k AS t ON p.`ProductID` = t.`ProductID` GROUP BY p.`Description` ORDER BY SUM(t.`Amount`) DESC LIMIT 5
SELECT T1.CustomerID, T1.Currency, SUM(T2.Price) / SUM(T2.Amount) AS AveragePricePerItem FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T2.Price) DESC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1
SELECT ym.Consumption FROM transactions_1k AS t INNER JOIN yearmonth AS ym ON t.CustomerID = ym.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date = '201208'
